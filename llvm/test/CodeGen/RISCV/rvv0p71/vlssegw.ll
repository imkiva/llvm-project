; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg2w_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg2w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg2w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg2w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2wu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg2wu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg2wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2wu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2wu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg2wu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg2wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2wu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg3w_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg3w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg3w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg3w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3wu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg3wu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3wu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg3wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3wu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3wu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg3wu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3wu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg3wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3wu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg4w_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg4w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg4w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg4w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4wu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg4wu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4wu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg4wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4wu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4wu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg4wu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4wu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg4wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4wu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg5w_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg5w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg5w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg5w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5wu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg5wu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5wu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg5wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5wu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5wu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg5wu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5wu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg5wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5wu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg6w_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg6w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg6w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg6w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6wu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg6wu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6wu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg6wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6wu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6wu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg6wu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6wu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg6wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6wu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg7w_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg7w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg7w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg7w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7wu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg7wu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7wu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg7wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7wu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7wu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg7wu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7wu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg7wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7wu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg8w_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg8w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg8w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg8w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8wu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg8wu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8wu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg8wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8wu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8wu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg8wu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8wu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg8wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8wu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2w.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg2w_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg2w.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2w.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2w.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg2w_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg2w.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2w.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2wu.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg2wu_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg2wu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2wu.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2wu.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg2wu_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg2wu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2wu.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3w.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg3w_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3w_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg3w.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3w.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3w.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg3w_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3w_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg3w.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3w.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3wu.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg3wu_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3wu_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg3wu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3wu.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3wu.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg3wu_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3wu_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg3wu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3wu.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4w.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg4w_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4w_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg4w.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4w.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4w.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg4w_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4w_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg4w.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4w.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4wu.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg4wu_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4wu_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg4wu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4wu.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4wu.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg4wu_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4wu_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg4wu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4wu.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2w.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlsseg2w_v_nxv8i32_nxv8i32(<vscale x 8 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vlsseg2w.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2w.nxv8i32.nxv8i32(
    <vscale x 8 x i32> undef, <vscale x 8 x i32> undef,
    <vscale x 8 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2w.mask.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlsseg2w_mask_v_nxv8i32_nxv8i32(<vscale x 8 x i32> %0, <vscale x 8 x i32>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_mask_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vlsseg2w.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2w.mask.nxv8i32.nxv8i32(
    <vscale x 8 x i32> %0, <vscale x 8 x i32> %0,
    <vscale x 8 x i32>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2wu.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlsseg2wu_v_nxv8i32_nxv8i32(<vscale x 8 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vlsseg2wu.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2wu.nxv8i32.nxv8i32(
    <vscale x 8 x i32> undef, <vscale x 8 x i32> undef,
    <vscale x 8 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2wu.mask.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlsseg2wu_mask_v_nxv8i32_nxv8i32(<vscale x 8 x i32> %0, <vscale x 8 x i32>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_mask_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vlsseg2wu.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2wu.mask.nxv8i32.nxv8i32(
    <vscale x 8 x i32> %0, <vscale x 8 x i32> %0,
    <vscale x 8 x i32>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg2w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg2w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg2w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg2w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg2wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg2wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg2wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg2wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg3w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg3w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg3w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg3w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg3wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg3wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg3wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg3wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg4w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg4w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg4w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg4w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg4wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg4wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg4wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg4wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg5w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg5w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg5w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg5w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg5wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg5wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg5wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg5wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg6w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg6w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg6w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg6w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg6wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg6wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg6wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg6wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg7w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg7w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg7w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg7w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg7wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg7wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg7wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg7wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg8w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg8w.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg8w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg8w.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg8wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg8wu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg8wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg8wu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2w.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg2w_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg2w.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2w.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2w.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg2w_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg2w.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2w.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2wu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg2wu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg2wu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2wu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2wu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg2wu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg2wu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2wu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3w.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg3w_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3w_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg3w.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3w.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3w.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg3w_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3w_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg3w.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3w.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3wu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg3wu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3wu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg3wu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3wu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3wu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg3wu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3wu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg3wu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3wu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4w.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg4w_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4w_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg4w.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4w.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4w.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg4w_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4w_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg4w.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4w.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4wu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg4wu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4wu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg4wu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4wu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4wu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg4wu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4wu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg4wu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4wu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2w.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlsseg2w_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vlsseg2w.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2w.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2w.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlsseg2w_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2w_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vlsseg2w.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2w.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0, <vscale x 4 x i64> %0,
    <vscale x 4 x i64>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2wu.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlsseg2wu_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vlsseg2wu.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2wu.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2wu.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlsseg2wu_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2wu_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vlsseg2wu.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2wu.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0, <vscale x 4 x i64> %0,
    <vscale x 4 x i64>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-LABEL: {{.*}}
; CHECK-NEXT: {{.*}}

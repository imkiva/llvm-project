; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple=riscv64 -mattr=+xtheadvector -verify-machineinstrs < %s \
; RUN: | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT

declare void @llvm.riscv.th.vsxseg2e.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define void @intrinsic_vsxseg2e_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg2e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg2e_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg2e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg3e.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define void @intrinsic_vsxseg3e_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg3e_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg3e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg3e.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg3e.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg3e_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg3e_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg3e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg3e.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg4e.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define void @intrinsic_vsxseg4e_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg4e_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg4e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg4e.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg4e.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg4e_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg4e_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg4e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg4e.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg5e.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define void @intrinsic_vsxseg5e_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg5e_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg5e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg5e.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg5e.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg5e_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg5e_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg5e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg5e.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg6e.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define void @intrinsic_vsxseg6e_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg6e_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg6e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg6e.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg6e.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg6e_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg6e_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg6e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg6e.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg7e.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define void @intrinsic_vsxseg7e_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg7e_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg7e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg7e.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg7e.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg7e_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg7e_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg7e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg7e.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg8e.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define void @intrinsic_vsxseg8e_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg8e_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg8e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg8e.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg8e.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg8e_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg8e_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg8e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg8e.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define void @intrinsic_vsxseg2e_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg2e.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define void @intrinsic_vsxseg2e_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg2e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg3e.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define void @intrinsic_vsxseg3e_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg3e_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg3e.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg3e.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg3e.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define void @intrinsic_vsxseg3e_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg3e_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg3e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg3e.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg4e.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define void @intrinsic_vsxseg4e_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg4e_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg4e.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg4e.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg4e.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define void @intrinsic_vsxseg4e_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg4e_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg4e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg4e.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  i64);

define void @intrinsic_vsxseg2e_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i64> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vsxseg2e.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %1,
    <vscale x 4 x i64> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  <vscale x 4 x i1>,
  i64);

define void @intrinsic_vsxseg2e_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i64> %2, <vscale x 4 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v10
; CHECK-NEXT:    th.vmv.v.v v19, v11
; CHECK-NEXT:    th.vmv.v.v v20, v8
; CHECK-NEXT:    th.vmv.v.v v21, v9
; CHECK-NEXT:    th.vmv.v.v v22, v10
; CHECK-NEXT:    th.vmv.v.v v23, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vsxseg2e.v v16, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0, <vscale x 4 x i64> %0,
    <vscale x 4 x i64>* %1,
    <vscale x 4 x i64> %2,
    <vscale x 4 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  i64);

define void @intrinsic_vsxseg2e_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg2e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.nxv1f64.nxv1f64(
    <vscale x 1 x double> undef, <vscale x 1 x double> undef,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.mask.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg2e_mask_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_mask_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg2e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.mask.nxv1f64.nxv1f64(
    <vscale x 1 x double> %0, <vscale x 1 x double> %0,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg3e.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  i64);

define void @intrinsic_vsxseg3e_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg3e_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg3e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg3e.nxv1f64.nxv1f64(
    <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg3e.mask.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg3e_mask_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg3e_mask_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg3e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg3e.mask.nxv1f64.nxv1f64(
    <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg4e.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  i64);

define void @intrinsic_vsxseg4e_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg4e_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg4e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg4e.nxv1f64.nxv1f64(
    <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg4e.mask.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg4e_mask_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg4e_mask_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg4e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg4e.mask.nxv1f64.nxv1f64(
    <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg5e.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  i64);

define void @intrinsic_vsxseg5e_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg5e_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg5e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg5e.nxv1f64.nxv1f64(
    <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg5e.mask.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg5e_mask_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg5e_mask_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg5e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg5e.mask.nxv1f64.nxv1f64(
    <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg6e.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  i64);

define void @intrinsic_vsxseg6e_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg6e_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg6e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg6e.nxv1f64.nxv1f64(
    <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg6e.mask.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg6e_mask_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg6e_mask_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg6e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg6e.mask.nxv1f64.nxv1f64(
    <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg7e.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  i64);

define void @intrinsic_vsxseg7e_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg7e_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg7e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg7e.nxv1f64.nxv1f64(
    <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg7e.mask.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg7e_mask_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg7e_mask_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg7e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg7e.mask.nxv1f64.nxv1f64(
    <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg8e.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  i64);

define void @intrinsic_vsxseg8e_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg8e_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg8e.v v8, (a0), v9
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg8e.nxv1f64.nxv1f64(
    <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef, <vscale x 1 x double> undef,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg8e.mask.nxv1f64.nxv1f64(
  <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>,
  <vscale x 1 x double>*,
  <vscale x 1 x double>,
  <vscale x 1 x i1>,
  i64);

define void @intrinsic_vsxseg8e_mask_v_nxv1f64_nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double>* %1, <vscale x 1 x double> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg8e_mask_v_nxv1f64_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vsxseg8e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg8e.mask.nxv1f64.nxv1f64(
    <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0, <vscale x 1 x double> %0,
    <vscale x 1 x double>* %1,
    <vscale x 1 x double> %2,
    <vscale x 1 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.nxv2f64.nxv2f64(
  <vscale x 2 x double>, <vscale x 2 x double>,
  <vscale x 2 x double>*,
  <vscale x 2 x double>,
  i64);

define void @intrinsic_vsxseg2e_v_nxv2f64_nxv2f64(<vscale x 2 x double> %0, <vscale x 2 x double>* %1, <vscale x 2 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_v_nxv2f64_nxv2f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg2e.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.nxv2f64.nxv2f64(
    <vscale x 2 x double> undef, <vscale x 2 x double> undef,
    <vscale x 2 x double>* %1,
    <vscale x 2 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.mask.nxv2f64.nxv2f64(
  <vscale x 2 x double>, <vscale x 2 x double>,
  <vscale x 2 x double>*,
  <vscale x 2 x double>,
  <vscale x 2 x i1>,
  i64);

define void @intrinsic_vsxseg2e_mask_v_nxv2f64_nxv2f64(<vscale x 2 x double> %0, <vscale x 2 x double>* %1, <vscale x 2 x double> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_mask_v_nxv2f64_nxv2f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg2e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.mask.nxv2f64.nxv2f64(
    <vscale x 2 x double> %0, <vscale x 2 x double> %0,
    <vscale x 2 x double>* %1,
    <vscale x 2 x double> %2,
    <vscale x 2 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg3e.nxv2f64.nxv2f64(
  <vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>,
  <vscale x 2 x double>*,
  <vscale x 2 x double>,
  i64);

define void @intrinsic_vsxseg3e_v_nxv2f64_nxv2f64(<vscale x 2 x double> %0, <vscale x 2 x double>* %1, <vscale x 2 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg3e_v_nxv2f64_nxv2f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg3e.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg3e.nxv2f64.nxv2f64(
    <vscale x 2 x double> undef, <vscale x 2 x double> undef, <vscale x 2 x double> undef,
    <vscale x 2 x double>* %1,
    <vscale x 2 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg3e.mask.nxv2f64.nxv2f64(
  <vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>,
  <vscale x 2 x double>*,
  <vscale x 2 x double>,
  <vscale x 2 x i1>,
  i64);

define void @intrinsic_vsxseg3e_mask_v_nxv2f64_nxv2f64(<vscale x 2 x double> %0, <vscale x 2 x double>* %1, <vscale x 2 x double> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg3e_mask_v_nxv2f64_nxv2f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg3e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg3e.mask.nxv2f64.nxv2f64(
    <vscale x 2 x double> %0, <vscale x 2 x double> %0, <vscale x 2 x double> %0,
    <vscale x 2 x double>* %1,
    <vscale x 2 x double> %2,
    <vscale x 2 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg4e.nxv2f64.nxv2f64(
  <vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>,
  <vscale x 2 x double>*,
  <vscale x 2 x double>,
  i64);

define void @intrinsic_vsxseg4e_v_nxv2f64_nxv2f64(<vscale x 2 x double> %0, <vscale x 2 x double>* %1, <vscale x 2 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg4e_v_nxv2f64_nxv2f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg4e.v v8, (a0), v10
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg4e.nxv2f64.nxv2f64(
    <vscale x 2 x double> undef, <vscale x 2 x double> undef, <vscale x 2 x double> undef, <vscale x 2 x double> undef,
    <vscale x 2 x double>* %1,
    <vscale x 2 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg4e.mask.nxv2f64.nxv2f64(
  <vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>,
  <vscale x 2 x double>*,
  <vscale x 2 x double>,
  <vscale x 2 x i1>,
  i64);

define void @intrinsic_vsxseg4e_mask_v_nxv2f64_nxv2f64(<vscale x 2 x double> %0, <vscale x 2 x double>* %1, <vscale x 2 x double> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg4e_mask_v_nxv2f64_nxv2f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vsxseg4e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg4e.mask.nxv2f64.nxv2f64(
    <vscale x 2 x double> %0, <vscale x 2 x double> %0, <vscale x 2 x double> %0, <vscale x 2 x double> %0,
    <vscale x 2 x double>* %1,
    <vscale x 2 x double> %2,
    <vscale x 2 x i1> %3,
    i64 %4)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.nxv4f64.nxv4f64(
  <vscale x 4 x double>, <vscale x 4 x double>,
  <vscale x 4 x double>*,
  <vscale x 4 x double>,
  i64);

define void @intrinsic_vsxseg2e_v_nxv4f64_nxv4f64(<vscale x 4 x double> %0, <vscale x 4 x double>* %1, <vscale x 4 x double> %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_v_nxv4f64_nxv4f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vsxseg2e.v v8, (a0), v12
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.nxv4f64.nxv4f64(
    <vscale x 4 x double> undef, <vscale x 4 x double> undef,
    <vscale x 4 x double>* %1,
    <vscale x 4 x double> %2,
    i64 %3)
  ret void
}

declare void @llvm.riscv.th.vsxseg2e.mask.nxv4f64.nxv4f64(
  <vscale x 4 x double>, <vscale x 4 x double>,
  <vscale x 4 x double>*,
  <vscale x 4 x double>,
  <vscale x 4 x i1>,
  i64);

define void @intrinsic_vsxseg2e_mask_v_nxv4f64_nxv4f64(<vscale x 4 x double> %0, <vscale x 4 x double>* %1, <vscale x 4 x double> %2, <vscale x 4 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vsxseg2e_mask_v_nxv4f64_nxv4f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v10
; CHECK-NEXT:    th.vmv.v.v v19, v11
; CHECK-NEXT:    th.vmv.v.v v20, v8
; CHECK-NEXT:    th.vmv.v.v v21, v9
; CHECK-NEXT:    th.vmv.v.v v22, v10
; CHECK-NEXT:    th.vmv.v.v v23, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vsxseg2e.v v16, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vsxseg2e.mask.nxv4f64.nxv4f64(
    <vscale x 4 x double> %0, <vscale x 4 x double> %0,
    <vscale x 4 x double>* %1,
    <vscale x 4 x double> %2,
    <vscale x 4 x i1> %3,
    i64 %4)
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-LABEL: {{.*}}
; CHECK-NEXT: {{.*}}

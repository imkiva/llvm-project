; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,RV32
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,RV64

declare <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i8.nxv8i8(
  <vscale x 8 x i8>,
  <vscale x 8 x i8>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vvm_nxv8i1_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv8i1_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m1, d1
; CHECK-NEXT:    th.vmadc.vvm v10, v8, v9, v0
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0,
    <vscale x 8 x i8> %1,
    <vscale x 8 x i1> %2,
    iXLen %3)

  ret <vscale x 8 x i1> %a
}

declare <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i8.nxv16i8(
  <vscale x 16 x i8>,
  <vscale x 16 x i8>,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i1> @intrinsic_vmadc_carry_in_vvm_nxv16i1_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8> %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv16i1_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m2, d1
; CHECK-NEXT:    th.vmadc.vvm v12, v8, v10, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0,
    <vscale x 16 x i8> %1,
    <vscale x 16 x i1> %2,
    iXLen %3)

  ret <vscale x 16 x i1> %a
}

declare <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i8.nxv32i8(
  <vscale x 32 x i8>,
  <vscale x 32 x i8>,
  <vscale x 32 x i1>,
  iXLen);

define <vscale x 32 x i1> @intrinsic_vmadc_carry_in_vvm_nxv32i1_nxv32i8_nxv32i8(<vscale x 32 x i8> %0, <vscale x 32 x i8> %1, <vscale x 32 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv32i1_nxv32i8_nxv32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m4, d1
; CHECK-NEXT:    th.vmadc.vvm v16, v8, v12, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i8.nxv32i8(
    <vscale x 32 x i8> %0,
    <vscale x 32 x i8> %1,
    <vscale x 32 x i1> %2,
    iXLen %3)

  ret <vscale x 32 x i1> %a
}

declare <vscale x 64 x i1> @llvm.riscv.th.vmadc.carry.in.nxv64i8.nxv64i8(
  <vscale x 64 x i8>,
  <vscale x 64 x i8>,
  <vscale x 64 x i1>,
  iXLen);

define <vscale x 64 x i1> @intrinsic_vmadc_carry_in_vvm_nxv64i1_nxv64i8_nxv64i8(<vscale x 64 x i8> %0, <vscale x 64 x i8> %1, <vscale x 64 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv64i1_nxv64i8_nxv64i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m8, d1
; CHECK-NEXT:    th.vmadc.vvm v24, v8, v16, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v24
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 64 x i1> @llvm.riscv.th.vmadc.carry.in.nxv64i8.nxv64i8(
    <vscale x 64 x i8> %0,
    <vscale x 64 x i8> %1,
    <vscale x 64 x i1> %2,
    iXLen %3)

  ret <vscale x 64 x i1> %a
}

declare <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i16.nxv4i16(
  <vscale x 4 x i16>,
  <vscale x 4 x i16>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i1> @intrinsic_vmadc_carry_in_vvm_nxv4i1_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv4i1_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m1, d1
; CHECK-NEXT:    th.vmadc.vvm v10, v8, v9, v0
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0,
    <vscale x 4 x i16> %1,
    <vscale x 4 x i1> %2,
    iXLen %3)

  ret <vscale x 4 x i1> %a
}

declare <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i16.nxv8i16(
  <vscale x 8 x i16>,
  <vscale x 8 x i16>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vvm_nxv8i1_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv8i1_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m2, d1
; CHECK-NEXT:    th.vmadc.vvm v12, v8, v10, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0,
    <vscale x 8 x i16> %1,
    <vscale x 8 x i1> %2,
    iXLen %3)

  ret <vscale x 8 x i1> %a
}

declare <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i16.nxv16i16(
  <vscale x 16 x i16>,
  <vscale x 16 x i16>,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i1> @intrinsic_vmadc_carry_in_vvm_nxv16i1_nxv16i16_nxv16i16(<vscale x 16 x i16> %0, <vscale x 16 x i16> %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv16i1_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m4, d1
; CHECK-NEXT:    th.vmadc.vvm v16, v8, v12, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i16.nxv16i16(
    <vscale x 16 x i16> %0,
    <vscale x 16 x i16> %1,
    <vscale x 16 x i1> %2,
    iXLen %3)

  ret <vscale x 16 x i1> %a
}

declare <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i16.nxv32i16(
  <vscale x 32 x i16>,
  <vscale x 32 x i16>,
  <vscale x 32 x i1>,
  iXLen);

define <vscale x 32 x i1> @intrinsic_vmadc_carry_in_vvm_nxv32i1_nxv32i16_nxv32i16(<vscale x 32 x i16> %0, <vscale x 32 x i16> %1, <vscale x 32 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv32i1_nxv32i16_nxv32i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m8, d1
; CHECK-NEXT:    th.vmadc.vvm v24, v8, v16, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v24
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i16.nxv32i16(
    <vscale x 32 x i16> %0,
    <vscale x 32 x i16> %1,
    <vscale x 32 x i1> %2,
    iXLen %3)

  ret <vscale x 32 x i1> %a
}

declare <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i32.nxv2i32(
  <vscale x 2 x i32>,
  <vscale x 2 x i32>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i1> @intrinsic_vmadc_carry_in_vvm_nxv2i1_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv2i1_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m1, d1
; CHECK-NEXT:    th.vmadc.vvm v10, v8, v9, v0
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0,
    <vscale x 2 x i32> %1,
    <vscale x 2 x i1> %2,
    iXLen %3)

  ret <vscale x 2 x i1> %a
}

declare <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i32.nxv4i32(
  <vscale x 4 x i32>,
  <vscale x 4 x i32>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i1> @intrinsic_vmadc_carry_in_vvm_nxv4i1_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv4i1_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m2, d1
; CHECK-NEXT:    th.vmadc.vvm v12, v8, v10, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0,
    <vscale x 4 x i32> %1,
    <vscale x 4 x i1> %2,
    iXLen %3)

  ret <vscale x 4 x i1> %a
}

declare <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i32.nxv8i32(
  <vscale x 8 x i32>,
  <vscale x 8 x i32>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vvm_nxv8i1_nxv8i32_nxv8i32(<vscale x 8 x i32> %0, <vscale x 8 x i32> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv8i1_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m4, d1
; CHECK-NEXT:    th.vmadc.vvm v16, v8, v12, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i32.nxv8i32(
    <vscale x 8 x i32> %0,
    <vscale x 8 x i32> %1,
    <vscale x 8 x i1> %2,
    iXLen %3)

  ret <vscale x 8 x i1> %a
}

declare <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i32.nxv16i32(
  <vscale x 16 x i32>,
  <vscale x 16 x i32>,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i1> @intrinsic_vmadc_carry_in_vvm_nxv16i1_nxv16i32_nxv16i32(<vscale x 16 x i32> %0, <vscale x 16 x i32> %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv16i1_nxv16i32_nxv16i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m8, d1
; CHECK-NEXT:    th.vmadc.vvm v24, v8, v16, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v24
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i32.nxv16i32(
    <vscale x 16 x i32> %0,
    <vscale x 16 x i32> %1,
    <vscale x 16 x i1> %2,
    iXLen %3)

  ret <vscale x 16 x i1> %a
}

declare <vscale x 1 x i1> @llvm.riscv.th.vmadc.carry.in.nxv1i64.nxv1i64(
  <vscale x 1 x i64>,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i1> @intrinsic_vmadc_carry_in_vvm_nxv1i1_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv1i1_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e64, m1, d1
; CHECK-NEXT:    th.vmadc.vvm v10, v8, v9, v0
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 1 x i1> @llvm.riscv.th.vmadc.carry.in.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0,
    <vscale x 1 x i64> %1,
    <vscale x 1 x i1> %2,
    iXLen %3)

  ret <vscale x 1 x i1> %a
}

declare <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i64.nxv2i64(
  <vscale x 2 x i64>,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i1> @intrinsic_vmadc_carry_in_vvm_nxv2i1_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv2i1_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e64, m2, d1
; CHECK-NEXT:    th.vmadc.vvm v12, v8, v10, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0,
    <vscale x 2 x i64> %1,
    <vscale x 2 x i1> %2,
    iXLen %3)

  ret <vscale x 2 x i1> %a
}

declare <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i64.nxv4i64(
  <vscale x 4 x i64>,
  <vscale x 4 x i64>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i1> @intrinsic_vmadc_carry_in_vvm_nxv4i1_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv4i1_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e64, m4, d1
; CHECK-NEXT:    th.vmadc.vvm v16, v8, v12, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0,
    <vscale x 4 x i64> %1,
    <vscale x 4 x i1> %2,
    iXLen %3)

  ret <vscale x 4 x i1> %a
}

declare <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i64.nxv8i64(
  <vscale x 8 x i64>,
  <vscale x 8 x i64>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vvm_nxv8i1_nxv8i64_nxv8i64(<vscale x 8 x i64> %0, <vscale x 8 x i64> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vvm_nxv8i1_nxv8i64_nxv8i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e64, m8, d1
; CHECK-NEXT:    th.vmadc.vvm v24, v8, v16, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v24
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i64.nxv8i64(
    <vscale x 8 x i64> %0,
    <vscale x 8 x i64> %1,
    <vscale x 8 x i1> %2,
    iXLen %3)

  ret <vscale x 8 x i1> %a
}

declare <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i8.i8(
  <vscale x 8 x i8>,
  i8,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vxm_nxv8i1_nxv8i8_i8(<vscale x 8 x i8> %0, i8 %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv8i1_nxv8i8_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vmadc.vxm v9, v8, a0, v0
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i8.i8(
    <vscale x 8 x i8> %0,
    i8 %1,
    <vscale x 8 x i1> %2,
    iXLen %3)

  ret <vscale x 8 x i1> %a
}

declare <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i8.i8(
  <vscale x 16 x i8>,
  i8,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i1> @intrinsic_vmadc_carry_in_vxm_nxv16i1_nxv16i8_i8(<vscale x 16 x i8> %0, i8 %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv16i1_nxv16i8_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m2, d1
; CHECK-NEXT:    th.vmadc.vxm v10, v8, a0, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i8.i8(
    <vscale x 16 x i8> %0,
    i8 %1,
    <vscale x 16 x i1> %2,
    iXLen %3)

  ret <vscale x 16 x i1> %a
}

declare <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i8.i8(
  <vscale x 32 x i8>,
  i8,
  <vscale x 32 x i1>,
  iXLen);

define <vscale x 32 x i1> @intrinsic_vmadc_carry_in_vxm_nxv32i1_nxv32i8_i8(<vscale x 32 x i8> %0, i8 %1, <vscale x 32 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv32i1_nxv32i8_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m4, d1
; CHECK-NEXT:    th.vmadc.vxm v12, v8, a0, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i8.i8(
    <vscale x 32 x i8> %0,
    i8 %1,
    <vscale x 32 x i1> %2,
    iXLen %3)

  ret <vscale x 32 x i1> %a
}

declare <vscale x 64 x i1> @llvm.riscv.th.vmadc.carry.in.nxv64i8.i8(
  <vscale x 64 x i8>,
  i8,
  <vscale x 64 x i1>,
  iXLen);

define <vscale x 64 x i1> @intrinsic_vmadc_carry_in_vxm_nxv64i1_nxv64i8_i8(<vscale x 64 x i8> %0, i8 %1, <vscale x 64 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv64i1_nxv64i8_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m8, d1
; CHECK-NEXT:    th.vmadc.vxm v16, v8, a0, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 64 x i1> @llvm.riscv.th.vmadc.carry.in.nxv64i8.i8(
    <vscale x 64 x i8> %0,
    i8 %1,
    <vscale x 64 x i1> %2,
    iXLen %3)

  ret <vscale x 64 x i1> %a
}

declare <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i16.i16(
  <vscale x 4 x i16>,
  i16,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i1> @intrinsic_vmadc_carry_in_vxm_nxv4i1_nxv4i16_i16(<vscale x 4 x i16> %0, i16 %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv4i1_nxv4i16_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vmadc.vxm v9, v8, a0, v0
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i16.i16(
    <vscale x 4 x i16> %0,
    i16 %1,
    <vscale x 4 x i1> %2,
    iXLen %3)

  ret <vscale x 4 x i1> %a
}

declare <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i16.i16(
  <vscale x 8 x i16>,
  i16,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vxm_nxv8i1_nxv8i16_i16(<vscale x 8 x i16> %0, i16 %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv8i1_nxv8i16_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vmadc.vxm v10, v8, a0, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i16.i16(
    <vscale x 8 x i16> %0,
    i16 %1,
    <vscale x 8 x i1> %2,
    iXLen %3)

  ret <vscale x 8 x i1> %a
}

declare <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i16.i16(
  <vscale x 16 x i16>,
  i16,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i1> @intrinsic_vmadc_carry_in_vxm_nxv16i1_nxv16i16_i16(<vscale x 16 x i16> %0, i16 %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv16i1_nxv16i16_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m4, d1
; CHECK-NEXT:    th.vmadc.vxm v12, v8, a0, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i16.i16(
    <vscale x 16 x i16> %0,
    i16 %1,
    <vscale x 16 x i1> %2,
    iXLen %3)

  ret <vscale x 16 x i1> %a
}

declare <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i16.i16(
  <vscale x 32 x i16>,
  i16,
  <vscale x 32 x i1>,
  iXLen);

define <vscale x 32 x i1> @intrinsic_vmadc_carry_in_vxm_nxv32i1_nxv32i16_i16(<vscale x 32 x i16> %0, i16 %1, <vscale x 32 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv32i1_nxv32i16_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m8, d1
; CHECK-NEXT:    th.vmadc.vxm v16, v8, a0, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i16.i16(
    <vscale x 32 x i16> %0,
    i16 %1,
    <vscale x 32 x i1> %2,
    iXLen %3)

  ret <vscale x 32 x i1> %a
}

declare <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i32.i32(
  <vscale x 2 x i32>,
  i32,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i1> @intrinsic_vmadc_carry_in_vxm_nxv2i1_nxv2i32_i32(<vscale x 2 x i32> %0, i32 %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv2i1_nxv2i32_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vmadc.vxm v9, v8, a0, v0
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i32.i32(
    <vscale x 2 x i32> %0,
    i32 %1,
    <vscale x 2 x i1> %2,
    iXLen %3)

  ret <vscale x 2 x i1> %a
}

declare <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i32.i32(
  <vscale x 4 x i32>,
  i32,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i1> @intrinsic_vmadc_carry_in_vxm_nxv4i1_nxv4i32_i32(<vscale x 4 x i32> %0, i32 %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv4i1_nxv4i32_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vmadc.vxm v10, v8, a0, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i32.i32(
    <vscale x 4 x i32> %0,
    i32 %1,
    <vscale x 4 x i1> %2,
    iXLen %3)

  ret <vscale x 4 x i1> %a
}

declare <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i32.i32(
  <vscale x 8 x i32>,
  i32,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vxm_nxv8i1_nxv8i32_i32(<vscale x 8 x i32> %0, i32 %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv8i1_nxv8i32_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m4, d1
; CHECK-NEXT:    th.vmadc.vxm v12, v8, a0, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i32.i32(
    <vscale x 8 x i32> %0,
    i32 %1,
    <vscale x 8 x i1> %2,
    iXLen %3)

  ret <vscale x 8 x i1> %a
}

declare <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i32.i32(
  <vscale x 16 x i32>,
  i32,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i1> @intrinsic_vmadc_carry_in_vxm_nxv16i1_nxv16i32_i32(<vscale x 16 x i32> %0, i32 %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vxm_nxv16i1_nxv16i32_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m8, d1
; CHECK-NEXT:    th.vmadc.vxm v16, v8, a0, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i32.i32(
    <vscale x 16 x i32> %0,
    i32 %1,
    <vscale x 16 x i1> %2,
    iXLen %3)

  ret <vscale x 16 x i1> %a
}

declare <vscale x 1 x i1> @llvm.riscv.th.vmadc.carry.in.nxv1i64.i64(
  <vscale x 1 x i64>,
  i64,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i1> @intrinsic_vmadc_carry_in_vxm_nxv1i1_nxv1i64_i64(<vscale x 1 x i64> %0, i64 %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; RV32-LABEL: intrinsic_vmadc_carry_in_vxm_nxv1i1_nxv1i64_i64:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    csrr a3, vl
; RV32-NEXT:    csrr a4, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a3, a4
; RV32-NEXT:    csrr a3, vl
; RV32-NEXT:    csrr a4, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a3, a4
; RV32-NEXT:    sw a1, 12(sp)
; RV32-NEXT:    sw a0, 8(sp)
; RV32-NEXT:    addi a0, sp, 8
; RV32-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; RV32-NEXT:    th.vlse.v v10, (a0), zero
; RV32-NEXT:    csrr a0, vl
; RV32-NEXT:    csrr a1, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a0, a1
; RV32-NEXT:    th.vmadc.vvm v9, v8, v10, v0
; RV32-NEXT:    csrr a0, vl
; RV32-NEXT:    csrr a1, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vmv.v.v v0, v9
; RV32-NEXT:    th.vsetvl zero, a0, a1
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: intrinsic_vmadc_carry_in_vxm_nxv1i1_nxv1i64_i64:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; RV64-NEXT:    th.vmadc.vxm v9, v8, a0, v0
; RV64-NEXT:    th.vmv.v.v v0, v9
; RV64-NEXT:    ret
entry:
  %a = call <vscale x 1 x i1> @llvm.riscv.th.vmadc.carry.in.nxv1i64.i64(
    <vscale x 1 x i64> %0,
    i64 %1,
    <vscale x 1 x i1> %2,
    iXLen %3)

  ret <vscale x 1 x i1> %a
}

declare <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i64.i64(
  <vscale x 2 x i64>,
  i64,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i1> @intrinsic_vmadc_carry_in_vxm_nxv2i1_nxv2i64_i64(<vscale x 2 x i64> %0, i64 %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; RV32-LABEL: intrinsic_vmadc_carry_in_vxm_nxv2i1_nxv2i64_i64:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    csrr a3, vl
; RV32-NEXT:    csrr a4, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a3, a4
; RV32-NEXT:    csrr a3, vl
; RV32-NEXT:    csrr a4, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a3, a4
; RV32-NEXT:    sw a1, 12(sp)
; RV32-NEXT:    sw a0, 8(sp)
; RV32-NEXT:    addi a0, sp, 8
; RV32-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; RV32-NEXT:    th.vlse.v v12, (a0), zero
; RV32-NEXT:    csrr a0, vl
; RV32-NEXT:    csrr a1, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a0, a1
; RV32-NEXT:    th.vmadc.vvm v10, v8, v12, v0
; RV32-NEXT:    csrr a0, vl
; RV32-NEXT:    csrr a1, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vmv.v.v v0, v10
; RV32-NEXT:    th.vsetvl zero, a0, a1
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: intrinsic_vmadc_carry_in_vxm_nxv2i1_nxv2i64_i64:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; RV64-NEXT:    th.vmadc.vxm v10, v8, a0, v0
; RV64-NEXT:    csrr a0, vl
; RV64-NEXT:    csrr a1, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vmv.v.v v0, v10
; RV64-NEXT:    th.vsetvl zero, a0, a1
; RV64-NEXT:    ret
entry:
  %a = call <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i64.i64(
    <vscale x 2 x i64> %0,
    i64 %1,
    <vscale x 2 x i1> %2,
    iXLen %3)

  ret <vscale x 2 x i1> %a
}

declare <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i64.i64(
  <vscale x 4 x i64>,
  i64,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i1> @intrinsic_vmadc_carry_in_vxm_nxv4i1_nxv4i64_i64(<vscale x 4 x i64> %0, i64 %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; RV32-LABEL: intrinsic_vmadc_carry_in_vxm_nxv4i1_nxv4i64_i64:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    csrr a3, vl
; RV32-NEXT:    csrr a4, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a3, a4
; RV32-NEXT:    csrr a3, vl
; RV32-NEXT:    csrr a4, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a3, a4
; RV32-NEXT:    sw a1, 12(sp)
; RV32-NEXT:    sw a0, 8(sp)
; RV32-NEXT:    addi a0, sp, 8
; RV32-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; RV32-NEXT:    th.vlse.v v16, (a0), zero
; RV32-NEXT:    csrr a0, vl
; RV32-NEXT:    csrr a1, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a0, a1
; RV32-NEXT:    th.vmadc.vvm v12, v8, v16, v0
; RV32-NEXT:    csrr a0, vl
; RV32-NEXT:    csrr a1, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vmv.v.v v0, v12
; RV32-NEXT:    th.vsetvl zero, a0, a1
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: intrinsic_vmadc_carry_in_vxm_nxv4i1_nxv4i64_i64:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; RV64-NEXT:    th.vmadc.vxm v12, v8, a0, v0
; RV64-NEXT:    csrr a0, vl
; RV64-NEXT:    csrr a1, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vmv.v.v v0, v12
; RV64-NEXT:    th.vsetvl zero, a0, a1
; RV64-NEXT:    ret
entry:
  %a = call <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i64.i64(
    <vscale x 4 x i64> %0,
    i64 %1,
    <vscale x 4 x i1> %2,
    iXLen %3)

  ret <vscale x 4 x i1> %a
}

declare <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i64.i64(
  <vscale x 8 x i64>,
  i64,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vxm_nxv8i1_nxv8i64_i64(<vscale x 8 x i64> %0, i64 %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; RV32-LABEL: intrinsic_vmadc_carry_in_vxm_nxv8i1_nxv8i64_i64:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    csrr a3, vl
; RV32-NEXT:    csrr a4, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a3, a4
; RV32-NEXT:    csrr a3, vl
; RV32-NEXT:    csrr a4, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a3, a4
; RV32-NEXT:    sw a1, 12(sp)
; RV32-NEXT:    sw a0, 8(sp)
; RV32-NEXT:    addi a0, sp, 8
; RV32-NEXT:    th.vsetvli zero, a2, e64, m8, d1
; RV32-NEXT:    th.vlse.v v24, (a0), zero
; RV32-NEXT:    csrr a0, vl
; RV32-NEXT:    csrr a1, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vsetvl zero, a0, a1
; RV32-NEXT:    th.vmadc.vvm v16, v8, v24, v0
; RV32-NEXT:    csrr a0, vl
; RV32-NEXT:    csrr a1, vtype
; RV32-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV32-NEXT:    th.vmv.v.v v0, v16
; RV32-NEXT:    th.vsetvl zero, a0, a1
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: intrinsic_vmadc_carry_in_vxm_nxv8i1_nxv8i64_i64:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    csrr a2, vl
; RV64-NEXT:    csrr a3, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vsetvl zero, a2, a3
; RV64-NEXT:    th.vsetvli zero, a1, e64, m8, d1
; RV64-NEXT:    th.vmadc.vxm v16, v8, a0, v0
; RV64-NEXT:    csrr a0, vl
; RV64-NEXT:    csrr a1, vtype
; RV64-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; RV64-NEXT:    th.vmv.v.v v0, v16
; RV64-NEXT:    th.vsetvl zero, a0, a1
; RV64-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i64.i64(
    <vscale x 8 x i64> %0,
    i64 %1,
    <vscale x 8 x i1> %2,
    iXLen %3)

  ret <vscale x 8 x i1> %a
}

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vim_nxv8i1_nxv8i8_i8(<vscale x 8 x i8> %0, <vscale x 8 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv8i1_nxv8i8_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m1, d1
; CHECK-NEXT:    th.vmadc.vim v9, v8, 9, v0
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i8.i8(
    <vscale x 8 x i8> %0,
    i8 9,
    <vscale x 8 x i1> %1,
    iXLen %2)

  ret <vscale x 8 x i1> %a
}

define <vscale x 16 x i1> @intrinsic_vmadc_carry_in_vim_nxv16i1_nxv16i8_i8(<vscale x 16 x i8> %0, <vscale x 16 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv16i1_nxv16i8_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m2, d1
; CHECK-NEXT:    th.vmadc.vim v10, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i8.i8(
    <vscale x 16 x i8> %0,
    i8 9,
    <vscale x 16 x i1> %1,
    iXLen %2)

  ret <vscale x 16 x i1> %a
}

define <vscale x 32 x i1> @intrinsic_vmadc_carry_in_vim_nxv32i1_nxv32i8_i8(<vscale x 32 x i8> %0, <vscale x 32 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv32i1_nxv32i8_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m4, d1
; CHECK-NEXT:    th.vmadc.vim v12, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i8.i8(
    <vscale x 32 x i8> %0,
    i8 9,
    <vscale x 32 x i1> %1,
    iXLen %2)

  ret <vscale x 32 x i1> %a
}

define <vscale x 64 x i1> @intrinsic_vmadc_carry_in_vim_nxv64i1_nxv64i8_i8(<vscale x 64 x i8> %0, <vscale x 64 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv64i1_nxv64i8_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m8, d1
; CHECK-NEXT:    th.vmadc.vim v16, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 64 x i1> @llvm.riscv.th.vmadc.carry.in.nxv64i8.i8(
    <vscale x 64 x i8> %0,
    i8 9,
    <vscale x 64 x i1> %1,
    iXLen %2)

  ret <vscale x 64 x i1> %a
}

define <vscale x 4 x i1> @intrinsic_vmadc_carry_in_vim_nxv4i1_nxv4i16_i16(<vscale x 4 x i16> %0, <vscale x 4 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv4i1_nxv4i16_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m1, d1
; CHECK-NEXT:    th.vmadc.vim v9, v8, 9, v0
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i16.i16(
    <vscale x 4 x i16> %0,
    i16 9,
    <vscale x 4 x i1> %1,
    iXLen %2)

  ret <vscale x 4 x i1> %a
}

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vim_nxv8i1_nxv8i16_i16(<vscale x 8 x i16> %0, <vscale x 8 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv8i1_nxv8i16_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m2, d1
; CHECK-NEXT:    th.vmadc.vim v10, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i16.i16(
    <vscale x 8 x i16> %0,
    i16 9,
    <vscale x 8 x i1> %1,
    iXLen %2)

  ret <vscale x 8 x i1> %a
}

define <vscale x 16 x i1> @intrinsic_vmadc_carry_in_vim_nxv16i1_nxv16i16_i16(<vscale x 16 x i16> %0, <vscale x 16 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv16i1_nxv16i16_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m4, d1
; CHECK-NEXT:    th.vmadc.vim v12, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i16.i16(
    <vscale x 16 x i16> %0,
    i16 9,
    <vscale x 16 x i1> %1,
    iXLen %2)

  ret <vscale x 16 x i1> %a
}

define <vscale x 32 x i1> @intrinsic_vmadc_carry_in_vim_nxv32i1_nxv32i16_i16(<vscale x 32 x i16> %0, <vscale x 32 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv32i1_nxv32i16_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m8, d1
; CHECK-NEXT:    th.vmadc.vim v16, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x i1> @llvm.riscv.th.vmadc.carry.in.nxv32i16.i16(
    <vscale x 32 x i16> %0,
    i16 9,
    <vscale x 32 x i1> %1,
    iXLen %2)

  ret <vscale x 32 x i1> %a
}

define <vscale x 2 x i1> @intrinsic_vmadc_carry_in_vim_nxv2i1_nxv2i32_i32(<vscale x 2 x i32> %0, <vscale x 2 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv2i1_nxv2i32_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m1, d1
; CHECK-NEXT:    th.vmadc.vim v9, v8, 9, v0
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i32.i32(
    <vscale x 2 x i32> %0,
    i32 9,
    <vscale x 2 x i1> %1,
    iXLen %2)

  ret <vscale x 2 x i1> %a
}

define <vscale x 4 x i1> @intrinsic_vmadc_carry_in_vim_nxv4i1_nxv4i32_i32(<vscale x 4 x i32> %0, <vscale x 4 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv4i1_nxv4i32_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m2, d1
; CHECK-NEXT:    th.vmadc.vim v10, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i32.i32(
    <vscale x 4 x i32> %0,
    i32 9,
    <vscale x 4 x i1> %1,
    iXLen %2)

  ret <vscale x 4 x i1> %a
}

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vim_nxv8i1_nxv8i32_i32(<vscale x 8 x i32> %0, <vscale x 8 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv8i1_nxv8i32_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m4, d1
; CHECK-NEXT:    th.vmadc.vim v12, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i32.i32(
    <vscale x 8 x i32> %0,
    i32 9,
    <vscale x 8 x i1> %1,
    iXLen %2)

  ret <vscale x 8 x i1> %a
}

define <vscale x 16 x i1> @intrinsic_vmadc_carry_in_vim_nxv16i1_nxv16i32_i32(<vscale x 16 x i32> %0, <vscale x 16 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv16i1_nxv16i32_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m8, d1
; CHECK-NEXT:    th.vmadc.vim v16, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmadc.carry.in.nxv16i32.i32(
    <vscale x 16 x i32> %0,
    i32 9,
    <vscale x 16 x i1> %1,
    iXLen %2)

  ret <vscale x 16 x i1> %a
}

define <vscale x 1 x i1> @intrinsic_vmadc_carry_in_vim_nxv1i1_nxv1i64_i64(<vscale x 1 x i64> %0, <vscale x 1 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv1i1_nxv1i64_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e64, m1, d1
; CHECK-NEXT:    th.vmadc.vim v9, v8, 9, v0
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 1 x i1> @llvm.riscv.th.vmadc.carry.in.nxv1i64.i64(
    <vscale x 1 x i64> %0,
    i64 9,
    <vscale x 1 x i1> %1,
    iXLen %2)

  ret <vscale x 1 x i1> %a
}

define <vscale x 2 x i1> @intrinsic_vmadc_carry_in_vim_nxv2i1_nxv2i64_i64(<vscale x 2 x i64> %0, <vscale x 2 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv2i1_nxv2i64_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e64, m2, d1
; CHECK-NEXT:    th.vmadc.vim v10, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x i1> @llvm.riscv.th.vmadc.carry.in.nxv2i64.i64(
    <vscale x 2 x i64> %0,
    i64 9,
    <vscale x 2 x i1> %1,
    iXLen %2)

  ret <vscale x 2 x i1> %a
}

define <vscale x 4 x i1> @intrinsic_vmadc_carry_in_vim_nxv4i1_nxv4i64_i64(<vscale x 4 x i64> %0, <vscale x 4 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv4i1_nxv4i64_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e64, m4, d1
; CHECK-NEXT:    th.vmadc.vim v12, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v12
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i1> @llvm.riscv.th.vmadc.carry.in.nxv4i64.i64(
    <vscale x 4 x i64> %0,
    i64 9,
    <vscale x 4 x i1> %1,
    iXLen %2)

  ret <vscale x 4 x i1> %a
}

define <vscale x 8 x i1> @intrinsic_vmadc_carry_in_vim_nxv8i1_nxv8i64_i64(<vscale x 8 x i64> %0, <vscale x 8 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmadc_carry_in_vim_nxv8i1_nxv8i64_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e64, m8, d1
; CHECK-NEXT:    th.vmadc.vim v16, v8, 9, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v16
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmadc.carry.in.nxv8i64.i64(
    <vscale x 8 x i64> %0,
    i64 9,
    <vscale x 8 x i1> %1,
    iXLen %2)

  ret <vscale x 8 x i1> %a
}

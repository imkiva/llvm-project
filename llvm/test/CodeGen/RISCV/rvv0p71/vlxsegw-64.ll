; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple=riscv64 -mattr=+xtheadvector -verify-machineinstrs < %s \
; RUN:    | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg2w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg2w.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg2w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg2w.v v7, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg2wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg2wu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg2wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg2wu.v v7, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg3w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg3w.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg3w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg3w.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg3wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg3wu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg3wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg3wu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg4w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg4w.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg4w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg4w.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg4wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg4wu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg4wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg4wu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg5w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg5w.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg5w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg5w.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg5wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg5wu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg5wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg5wu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg6w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg6w.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg6w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg6w.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg6wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg6wu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg6wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg6wu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg7w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg7w.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg7w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg7w.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg7wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg7wu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg7wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg7wu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg8w_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg8w.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg8w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg8w.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8wu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg8wu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8wu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg8wu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8wu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8wu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg8wu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8wu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg8wu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8wu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2w.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg2w_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2w_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg2w.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2w.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2w.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg2w_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2w_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg2w.v v6, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2w.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2wu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg2wu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2wu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg2wu.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2wu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2wu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg2wu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2wu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg2wu.v v6, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2wu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3w.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg3w_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3w_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg3w.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3w.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3w.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg3w_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3w_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg3w.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3w.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3wu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg3wu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3wu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg3wu.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3wu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3wu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg3wu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3wu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg3wu.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3wu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4w.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg4w_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4w_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg4w.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4w.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4w.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg4w_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4w_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg4w.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4w.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4wu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg4wu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4wu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg4wu.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4wu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4wu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg4wu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4wu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg4wu.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4wu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2w.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  i64);

define <vscale x 4 x i64> @intrinsic_vlxseg2w_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, <vscale x 4 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2w_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlxseg2w.v v12, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2w.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    <vscale x 4 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2w.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  <vscale x 4 x i1>,
  i64);

define <vscale x 4 x i64> @intrinsic_vlxseg2w_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i64> %2, <vscale x 4 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2w_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlxseg2w.v v4, (a0), v12, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2w.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0, <vscale x 4 x i64> %0,
    <vscale x 4 x i64>* %1,
    <vscale x 4 x i64> %2,
    <vscale x 4 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2wu.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  i64);

define <vscale x 4 x i64> @intrinsic_vlxseg2wu_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, <vscale x 4 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2wu_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlxseg2wu.v v12, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2wu.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    <vscale x 4 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2wu.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  <vscale x 4 x i1>,
  i64);

define <vscale x 4 x i64> @intrinsic_vlxseg2wu_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i64> %2, <vscale x 4 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2wu_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlxseg2wu.v v4, (a0), v12, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2wu.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0, <vscale x 4 x i64> %0,
    <vscale x 4 x i64>* %1,
    <vscale x 4 x i64> %2,
    <vscale x 4 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-LABEL: {{.*}}
; CHECK-NEXT: {{.*}}

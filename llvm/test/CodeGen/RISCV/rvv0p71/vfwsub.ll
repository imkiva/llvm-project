; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector,+zfh,+d \
; RUN:   -verify-machineinstrs | FileCheck %s
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector,+zfh,+d \
; RUN:   -verify-machineinstrs | FileCheck %s

declare <vscale x 4 x float> @llvm.riscv.th.vfwsub.nxv4f32.nxv4f16.nxv4f16(
  <vscale x 4 x float>,
  <vscale x 4 x half>,
  <vscale x 4 x half>,
  iXLen, iXLen);

define <vscale x 4 x float> @intrinsic_vfwsub_vv_nxv4f32_nxv4f16_nxv4f16(<vscale x 4 x half> %0, <vscale x 4 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vv_nxv4f32_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v10, v8, v9
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vmv.v.v v9, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x float> @llvm.riscv.th.vfwsub.nxv4f32.nxv4f16.nxv4f16(
    <vscale x 4 x float> undef,
    <vscale x 4 x half> %0,
    <vscale x 4 x half> %1,
    iXLen 0, iXLen %2)

  ret <vscale x 4 x float> %a
}

declare <vscale x 4 x float> @llvm.riscv.th.vfwsub.mask.nxv4f32.nxv4f16.nxv4f16(
  <vscale x 4 x float>,
  <vscale x 4 x half>,
  <vscale x 4 x half>,
  <vscale x 4 x i1>,
  iXLen, iXLen);

define <vscale x 4 x float> @intrinsic_vfwsub_mask_vv_nxv4f32_nxv4f16_nxv4f16(<vscale x 4 x float> %0, <vscale x 4 x half> %1, <vscale x 4 x half> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vv_nxv4f32_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v8, v10, v11, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x float> @llvm.riscv.th.vfwsub.mask.nxv4f32.nxv4f16.nxv4f16(
    <vscale x 4 x float> %0,
    <vscale x 4 x half> %1,
    <vscale x 4 x half> %2,
    <vscale x 4 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 4 x float> %a
}

declare <vscale x 8 x float> @llvm.riscv.th.vfwsub.nxv8f32.nxv8f16.nxv8f16(
  <vscale x 8 x float>,
  <vscale x 8 x half>,
  <vscale x 8 x half>,
  iXLen, iXLen);

define <vscale x 8 x float> @intrinsic_vfwsub_vv_nxv8f32_nxv8f16_nxv8f16(<vscale x 8 x half> %0, <vscale x 8 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vv_nxv8f32_nxv8f16_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v12, v8, v10
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vmv.v.v v10, v14
; CHECK-NEXT:    th.vmv.v.v v11, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x float> @llvm.riscv.th.vfwsub.nxv8f32.nxv8f16.nxv8f16(
    <vscale x 8 x float> undef,
    <vscale x 8 x half> %0,
    <vscale x 8 x half> %1,
    iXLen 0, iXLen %2)

  ret <vscale x 8 x float> %a
}

declare <vscale x 8 x float> @llvm.riscv.th.vfwsub.mask.nxv8f32.nxv8f16.nxv8f16(
  <vscale x 8 x float>,
  <vscale x 8 x half>,
  <vscale x 8 x half>,
  <vscale x 8 x i1>,
  iXLen, iXLen);

define <vscale x 8 x float> @intrinsic_vfwsub_mask_vv_nxv8f32_nxv8f16_nxv8f16(<vscale x 8 x float> %0, <vscale x 8 x half> %1, <vscale x 8 x half> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vv_nxv8f32_nxv8f16_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v8, v12, v14, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x float> @llvm.riscv.th.vfwsub.mask.nxv8f32.nxv8f16.nxv8f16(
    <vscale x 8 x float> %0,
    <vscale x 8 x half> %1,
    <vscale x 8 x half> %2,
    <vscale x 8 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 8 x float> %a
}

declare <vscale x 16 x float> @llvm.riscv.th.vfwsub.nxv16f32.nxv16f16.nxv16f16(
  <vscale x 16 x float>,
  <vscale x 16 x half>,
  <vscale x 16 x half>,
  iXLen, iXLen);

define <vscale x 16 x float> @intrinsic_vfwsub_vv_nxv16f32_nxv16f16_nxv16f16(<vscale x 16 x half> %0, <vscale x 16 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vv_nxv16f32_nxv16f16_nxv16f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v16, v8, v12
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vmv.v.v v12, v20
; CHECK-NEXT:    th.vmv.v.v v13, v21
; CHECK-NEXT:    th.vmv.v.v v14, v22
; CHECK-NEXT:    th.vmv.v.v v15, v23
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x float> @llvm.riscv.th.vfwsub.nxv16f32.nxv16f16.nxv16f16(
    <vscale x 16 x float> undef,
    <vscale x 16 x half> %0,
    <vscale x 16 x half> %1,
    iXLen 0, iXLen %2)

  ret <vscale x 16 x float> %a
}

declare <vscale x 16 x float> @llvm.riscv.th.vfwsub.mask.nxv16f32.nxv16f16.nxv16f16(
  <vscale x 16 x float>,
  <vscale x 16 x half>,
  <vscale x 16 x half>,
  <vscale x 16 x i1>,
  iXLen, iXLen);

define <vscale x 16 x float> @intrinsic_vfwsub_mask_vv_nxv16f32_nxv16f16_nxv16f16(<vscale x 16 x float> %0, <vscale x 16 x half> %1, <vscale x 16 x half> %2, <vscale x 16 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vv_nxv16f32_nxv16f16_nxv16f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v8, v16, v20, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x float> @llvm.riscv.th.vfwsub.mask.nxv16f32.nxv16f16.nxv16f16(
    <vscale x 16 x float> %0,
    <vscale x 16 x half> %1,
    <vscale x 16 x half> %2,
    <vscale x 16 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 16 x float> %a
}

declare <vscale x 2 x double> @llvm.riscv.th.vfwsub.nxv2f64.nxv2f32.nxv2f32(
  <vscale x 2 x double>,
  <vscale x 2 x float>,
  <vscale x 2 x float>,
  iXLen, iXLen);

define <vscale x 2 x double> @intrinsic_vfwsub_vv_nxv2f64_nxv2f32_nxv2f32(<vscale x 2 x float> %0, <vscale x 2 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vv_nxv2f64_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v10, v8, v9
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vmv.v.v v9, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x double> @llvm.riscv.th.vfwsub.nxv2f64.nxv2f32.nxv2f32(
    <vscale x 2 x double> undef,
    <vscale x 2 x float> %0,
    <vscale x 2 x float> %1,
    iXLen 0, iXLen %2)

  ret <vscale x 2 x double> %a
}

declare <vscale x 2 x double> @llvm.riscv.th.vfwsub.mask.nxv2f64.nxv2f32.nxv2f32(
  <vscale x 2 x double>,
  <vscale x 2 x float>,
  <vscale x 2 x float>,
  <vscale x 2 x i1>,
  iXLen, iXLen);

define <vscale x 2 x double> @intrinsic_vfwsub_mask_vv_nxv2f64_nxv2f32_nxv2f32(<vscale x 2 x double> %0, <vscale x 2 x float> %1, <vscale x 2 x float> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vv_nxv2f64_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v8, v10, v11, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x double> @llvm.riscv.th.vfwsub.mask.nxv2f64.nxv2f32.nxv2f32(
    <vscale x 2 x double> %0,
    <vscale x 2 x float> %1,
    <vscale x 2 x float> %2,
    <vscale x 2 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 2 x double> %a
}

declare <vscale x 4 x double> @llvm.riscv.th.vfwsub.nxv4f64.nxv4f32.nxv4f32(
  <vscale x 4 x double>,
  <vscale x 4 x float>,
  <vscale x 4 x float>,
  iXLen, iXLen);

define <vscale x 4 x double> @intrinsic_vfwsub_vv_nxv4f64_nxv4f32_nxv4f32(<vscale x 4 x float> %0, <vscale x 4 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vv_nxv4f64_nxv4f32_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v12, v8, v10
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vmv.v.v v10, v14
; CHECK-NEXT:    th.vmv.v.v v11, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x double> @llvm.riscv.th.vfwsub.nxv4f64.nxv4f32.nxv4f32(
    <vscale x 4 x double> undef,
    <vscale x 4 x float> %0,
    <vscale x 4 x float> %1,
    iXLen 0, iXLen %2)

  ret <vscale x 4 x double> %a
}

declare <vscale x 4 x double> @llvm.riscv.th.vfwsub.mask.nxv4f64.nxv4f32.nxv4f32(
  <vscale x 4 x double>,
  <vscale x 4 x float>,
  <vscale x 4 x float>,
  <vscale x 4 x i1>,
  iXLen, iXLen);

define <vscale x 4 x double> @intrinsic_vfwsub_mask_vv_nxv4f64_nxv4f32_nxv4f32(<vscale x 4 x double> %0, <vscale x 4 x float> %1, <vscale x 4 x float> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vv_nxv4f64_nxv4f32_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v8, v12, v14, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x double> @llvm.riscv.th.vfwsub.mask.nxv4f64.nxv4f32.nxv4f32(
    <vscale x 4 x double> %0,
    <vscale x 4 x float> %1,
    <vscale x 4 x float> %2,
    <vscale x 4 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 4 x double> %a
}

declare <vscale x 8 x double> @llvm.riscv.th.vfwsub.nxv8f64.nxv8f32.nxv8f32(
  <vscale x 8 x double>,
  <vscale x 8 x float>,
  <vscale x 8 x float>,
  iXLen, iXLen);

define <vscale x 8 x double> @intrinsic_vfwsub_vv_nxv8f64_nxv8f32_nxv8f32(<vscale x 8 x float> %0, <vscale x 8 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vv_nxv8f64_nxv8f32_nxv8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v16, v8, v12
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vmv.v.v v12, v20
; CHECK-NEXT:    th.vmv.v.v v13, v21
; CHECK-NEXT:    th.vmv.v.v v14, v22
; CHECK-NEXT:    th.vmv.v.v v15, v23
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x double> @llvm.riscv.th.vfwsub.nxv8f64.nxv8f32.nxv8f32(
    <vscale x 8 x double> undef,
    <vscale x 8 x float> %0,
    <vscale x 8 x float> %1,
    iXLen 0, iXLen %2)

  ret <vscale x 8 x double> %a
}

declare <vscale x 8 x double> @llvm.riscv.th.vfwsub.mask.nxv8f64.nxv8f32.nxv8f32(
  <vscale x 8 x double>,
  <vscale x 8 x float>,
  <vscale x 8 x float>,
  <vscale x 8 x i1>,
  iXLen, iXLen);

define <vscale x 8 x double> @intrinsic_vfwsub_mask_vv_nxv8f64_nxv8f32_nxv8f32(<vscale x 8 x double> %0, <vscale x 8 x float> %1, <vscale x 8 x float> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vv_nxv8f64_nxv8f32_nxv8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vv v8, v16, v20, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x double> @llvm.riscv.th.vfwsub.mask.nxv8f64.nxv8f32.nxv8f32(
    <vscale x 8 x double> %0,
    <vscale x 8 x float> %1,
    <vscale x 8 x float> %2,
    <vscale x 8 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 8 x double> %a
}

declare <vscale x 4 x float> @llvm.riscv.th.vfwsub.nxv4f32.nxv4f16.f16(
  <vscale x 4 x float>,
  <vscale x 4 x half>,
  half,
  iXLen, iXLen);

define <vscale x 4 x float> @intrinsic_vfwsub_vf_nxv4f32_nxv4f16_f16(<vscale x 4 x half> %0, half %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vf_nxv4f32_nxv4f16_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v10, v8, fa0
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vmv.v.v v9, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x float> @llvm.riscv.th.vfwsub.nxv4f32.nxv4f16.f16(
    <vscale x 4 x float> undef,
    <vscale x 4 x half> %0,
    half %1,
    iXLen 0, iXLen %2)

  ret <vscale x 4 x float> %a
}

declare <vscale x 4 x float> @llvm.riscv.th.vfwsub.mask.nxv4f32.nxv4f16.f16(
  <vscale x 4 x float>,
  <vscale x 4 x half>,
  half,
  <vscale x 4 x i1>,
  iXLen, iXLen);

define <vscale x 4 x float> @intrinsic_vfwsub_mask_vf_nxv4f32_nxv4f16_f16(<vscale x 4 x float> %0, <vscale x 4 x half> %1, half %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vf_nxv4f32_nxv4f16_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v8, v10, fa0, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x float> @llvm.riscv.th.vfwsub.mask.nxv4f32.nxv4f16.f16(
    <vscale x 4 x float> %0,
    <vscale x 4 x half> %1,
    half %2,
    <vscale x 4 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 4 x float> %a
}

declare <vscale x 8 x float> @llvm.riscv.th.vfwsub.nxv8f32.nxv8f16.f16(
  <vscale x 8 x float>,
  <vscale x 8 x half>,
  half,
  iXLen, iXLen);

define <vscale x 8 x float> @intrinsic_vfwsub_vf_nxv8f32_nxv8f16_f16(<vscale x 8 x half> %0, half %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vf_nxv8f32_nxv8f16_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v12, v8, fa0
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vmv.v.v v10, v14
; CHECK-NEXT:    th.vmv.v.v v11, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x float> @llvm.riscv.th.vfwsub.nxv8f32.nxv8f16.f16(
    <vscale x 8 x float> undef,
    <vscale x 8 x half> %0,
    half %1,
    iXLen 0, iXLen %2)

  ret <vscale x 8 x float> %a
}

declare <vscale x 8 x float> @llvm.riscv.th.vfwsub.mask.nxv8f32.nxv8f16.f16(
  <vscale x 8 x float>,
  <vscale x 8 x half>,
  half,
  <vscale x 8 x i1>,
  iXLen, iXLen);

define <vscale x 8 x float> @intrinsic_vfwsub_mask_vf_nxv8f32_nxv8f16_f16(<vscale x 8 x float> %0, <vscale x 8 x half> %1, half %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vf_nxv8f32_nxv8f16_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v8, v12, fa0, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x float> @llvm.riscv.th.vfwsub.mask.nxv8f32.nxv8f16.f16(
    <vscale x 8 x float> %0,
    <vscale x 8 x half> %1,
    half %2,
    <vscale x 8 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 8 x float> %a
}

declare <vscale x 16 x float> @llvm.riscv.th.vfwsub.nxv16f32.nxv16f16.f16(
  <vscale x 16 x float>,
  <vscale x 16 x half>,
  half,
  iXLen, iXLen);

define <vscale x 16 x float> @intrinsic_vfwsub_vf_nxv16f32_nxv16f16_f16(<vscale x 16 x half> %0, half %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vf_nxv16f32_nxv16f16_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v16, v8, fa0
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vmv.v.v v12, v20
; CHECK-NEXT:    th.vmv.v.v v13, v21
; CHECK-NEXT:    th.vmv.v.v v14, v22
; CHECK-NEXT:    th.vmv.v.v v15, v23
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x float> @llvm.riscv.th.vfwsub.nxv16f32.nxv16f16.f16(
    <vscale x 16 x float> undef,
    <vscale x 16 x half> %0,
    half %1,
    iXLen 0, iXLen %2)

  ret <vscale x 16 x float> %a
}

declare <vscale x 16 x float> @llvm.riscv.th.vfwsub.mask.nxv16f32.nxv16f16.f16(
  <vscale x 16 x float>,
  <vscale x 16 x half>,
  half,
  <vscale x 16 x i1>,
  iXLen, iXLen);

define <vscale x 16 x float> @intrinsic_vfwsub_mask_vf_nxv16f32_nxv16f16_f16(<vscale x 16 x float> %0, <vscale x 16 x half> %1, half %2, <vscale x 16 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vf_nxv16f32_nxv16f16_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v8, v16, fa0, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x float> @llvm.riscv.th.vfwsub.mask.nxv16f32.nxv16f16.f16(
    <vscale x 16 x float> %0,
    <vscale x 16 x half> %1,
    half %2,
    <vscale x 16 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 16 x float> %a
}

declare <vscale x 2 x double> @llvm.riscv.th.vfwsub.nxv2f64.nxv2f32.f32(
  <vscale x 2 x double>,
  <vscale x 2 x float>,
  float,
  iXLen, iXLen);

define <vscale x 2 x double> @intrinsic_vfwsub_vf_nxv2f64_nxv2f32_f32(<vscale x 2 x float> %0, float %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vf_nxv2f64_nxv2f32_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v10, v8, fa0
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vmv.v.v v9, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x double> @llvm.riscv.th.vfwsub.nxv2f64.nxv2f32.f32(
    <vscale x 2 x double> undef,
    <vscale x 2 x float> %0,
    float %1,
    iXLen 0, iXLen %2)

  ret <vscale x 2 x double> %a
}

declare <vscale x 2 x double> @llvm.riscv.th.vfwsub.mask.nxv2f64.nxv2f32.f32(
  <vscale x 2 x double>,
  <vscale x 2 x float>,
  float,
  <vscale x 2 x i1>,
  iXLen, iXLen);

define <vscale x 2 x double> @intrinsic_vfwsub_mask_vf_nxv2f64_nxv2f32_f32(<vscale x 2 x double> %0, <vscale x 2 x float> %1, float %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vf_nxv2f64_nxv2f32_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v8, v10, fa0, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x double> @llvm.riscv.th.vfwsub.mask.nxv2f64.nxv2f32.f32(
    <vscale x 2 x double> %0,
    <vscale x 2 x float> %1,
    float %2,
    <vscale x 2 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 2 x double> %a
}

declare <vscale x 4 x double> @llvm.riscv.th.vfwsub.nxv4f64.nxv4f32.f32(
  <vscale x 4 x double>,
  <vscale x 4 x float>,
  float,
  iXLen, iXLen);

define <vscale x 4 x double> @intrinsic_vfwsub_vf_nxv4f64_nxv4f32_f32(<vscale x 4 x float> %0, float %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vf_nxv4f64_nxv4f32_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v12, v8, fa0
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vmv.v.v v10, v14
; CHECK-NEXT:    th.vmv.v.v v11, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x double> @llvm.riscv.th.vfwsub.nxv4f64.nxv4f32.f32(
    <vscale x 4 x double> undef,
    <vscale x 4 x float> %0,
    float %1,
    iXLen 0, iXLen %2)

  ret <vscale x 4 x double> %a
}

declare <vscale x 4 x double> @llvm.riscv.th.vfwsub.mask.nxv4f64.nxv4f32.f32(
  <vscale x 4 x double>,
  <vscale x 4 x float>,
  float,
  <vscale x 4 x i1>,
  iXLen, iXLen);

define <vscale x 4 x double> @intrinsic_vfwsub_mask_vf_nxv4f64_nxv4f32_f32(<vscale x 4 x double> %0, <vscale x 4 x float> %1, float %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vf_nxv4f64_nxv4f32_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v8, v12, fa0, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x double> @llvm.riscv.th.vfwsub.mask.nxv4f64.nxv4f32.f32(
    <vscale x 4 x double> %0,
    <vscale x 4 x float> %1,
    float %2,
    <vscale x 4 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 4 x double> %a
}

declare <vscale x 8 x double> @llvm.riscv.th.vfwsub.nxv8f64.nxv8f32.f32(
  <vscale x 8 x double>,
  <vscale x 8 x float>,
  float,
  iXLen, iXLen);

define <vscale x 8 x double> @intrinsic_vfwsub_vf_nxv8f64_nxv8f32_f32(<vscale x 8 x float> %0, float %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_vf_nxv8f64_nxv8f32_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v16, v8, fa0
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vmv.v.v v12, v20
; CHECK-NEXT:    th.vmv.v.v v13, v21
; CHECK-NEXT:    th.vmv.v.v v14, v22
; CHECK-NEXT:    th.vmv.v.v v15, v23
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x double> @llvm.riscv.th.vfwsub.nxv8f64.nxv8f32.f32(
    <vscale x 8 x double> undef,
    <vscale x 8 x float> %0,
    float %1,
    iXLen 0, iXLen %2)

  ret <vscale x 8 x double> %a
}

declare <vscale x 8 x double> @llvm.riscv.th.vfwsub.mask.nxv8f64.nxv8f32.f32(
  <vscale x 8 x double>,
  <vscale x 8 x float>,
  float,
  <vscale x 8 x i1>,
  iXLen, iXLen);

define <vscale x 8 x double> @intrinsic_vfwsub_mask_vf_nxv8f64_nxv8f32_f32(<vscale x 8 x double> %0, <vscale x 8 x float> %1, float %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vfwsub_mask_vf_nxv8f64_nxv8f32_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwsub.vf v8, v16, fa0, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x double> @llvm.riscv.th.vfwsub.mask.nxv8f64.nxv8f32.f32(
    <vscale x 8 x double> %0,
    <vscale x 8 x float> %1,
    float %2,
    <vscale x 8 x i1> %3,
    iXLen 0, iXLen %4)

  ret <vscale x 8 x double> %a
}

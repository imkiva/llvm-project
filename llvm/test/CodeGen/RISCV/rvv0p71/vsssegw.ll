; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT

declare void @llvm.riscv.th.vssseg2w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg2w_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg2w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg3w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg3w_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg3w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg3w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg3w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg3w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg3w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg3w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg3w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg3w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg4w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg4w_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg4w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg4w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg4w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg4w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg4w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg4w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg4w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg4w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg5w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg5w_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg5w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg5w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg5w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg5w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg5w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg5w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg5w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg5w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg6w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg6w_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg6w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg6w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg6w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg6w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg6w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg6w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg6w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg6w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg7w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg7w_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg7w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg7w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg7w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg7w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg7w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg7w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg7w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg7w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg8w.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg8w_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg8w_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg8w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg8w.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg8w.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg8w_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg8w_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vssseg8w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg8w.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg2w_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define void @intrinsic_vssseg2w_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, iXLen %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %1,
    iXLen %2,
    <vscale x 4 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg3w.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg3w_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg3w_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vssseg3w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg3w.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg3w.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define void @intrinsic_vssseg3w_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, iXLen %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg3w_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vssseg3w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg3w.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %1,
    iXLen %2,
    <vscale x 4 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg4w.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg4w_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg4w_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vssseg4w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg4w.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg4w.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define void @intrinsic_vssseg4w_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, iXLen %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg4w_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vssseg4w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg4w.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %1,
    iXLen %2,
    <vscale x 4 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg2w_v_nxv8i32_nxv8i32(<vscale x 8 x i32> %0, <vscale x 8 x i32>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.nxv8i32.nxv8i32(
    <vscale x 8 x i32> undef, <vscale x 8 x i32> undef,
    <vscale x 8 x i32>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.mask.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define void @intrinsic_vssseg2w_mask_v_nxv8i32_nxv8i32(<vscale x 8 x i32> %0, <vscale x 8 x i32>* %1, iXLen %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_mask_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.mask.nxv8i32.nxv8i32(
    <vscale x 8 x i32> undef, <vscale x 8 x i32> undef,
    <vscale x 8 x i32>* %1,
    iXLen %2,
    <vscale x 8 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg2w_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define void @intrinsic_vssseg2w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, <vscale x 1 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    <vscale x 1 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg3w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg3w_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg3w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg3w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg3w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg3w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define void @intrinsic_vssseg3w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, <vscale x 1 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg3w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg3w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg3w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    <vscale x 1 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg4w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg4w_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg4w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg4w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg4w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg4w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define void @intrinsic_vssseg4w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, <vscale x 1 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg4w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg4w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg4w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    <vscale x 1 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg5w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg5w_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg5w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg5w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg5w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg5w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define void @intrinsic_vssseg5w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, <vscale x 1 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg5w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg5w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg5w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    <vscale x 1 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg6w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg6w_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg6w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg6w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg6w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg6w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define void @intrinsic_vssseg6w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, <vscale x 1 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg6w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg6w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg6w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    <vscale x 1 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg7w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg7w_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg7w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg7w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg7w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg7w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define void @intrinsic_vssseg7w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, <vscale x 1 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg7w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg7w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg7w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    <vscale x 1 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg8w.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg8w_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg8w_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg8w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg8w.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg8w.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define void @intrinsic_vssseg8w_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, iXLen %2, <vscale x 1 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg8w_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vssseg8w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg8w.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %1,
    iXLen %2,
    <vscale x 1 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg2w_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg2w_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg3w.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg3w_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg3w_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vssseg3w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg3w.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg3w.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg3w_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg3w_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vssseg3w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg3w.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg4w.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg4w_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg4w_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vssseg4w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg4w.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg4w.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define void @intrinsic_vssseg4w_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, iXLen %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg4w_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vssseg4w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg4w.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %1,
    iXLen %2,
    <vscale x 2 x i1> %3,
    iXLen %4)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  iXLen);

define void @intrinsic_vssseg2w_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, iXLen %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %1,
    iXLen %2,
    iXLen %3)
  ret void
}

declare void @llvm.riscv.th.vssseg2w.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define void @intrinsic_vssseg2w_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, iXLen %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vssseg2w_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vssseg2w.v v8, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  call void @llvm.riscv.th.vssseg2w.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %1,
    iXLen %2,
    <vscale x 4 x i1> %3,
    iXLen %4)
  ret void
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-LABEL: {{.*}}
; CHECK-NEXT: {{.*}}

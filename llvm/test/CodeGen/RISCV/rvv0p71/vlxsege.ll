; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT

declare { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg2e.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg2e_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, <vscale x 8 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v9, (a0), v8
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg2e.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    <vscale x 8 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg2e.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg2e_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i8> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v7, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg2e.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    <vscale x 8 x i8> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg3e.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg3e_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, <vscale x 8 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v9, (a0), v8
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg3e.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    <vscale x 8 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg3e.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg3e_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i8> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg3e.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    <vscale x 8 x i8> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg4e.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg4e_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, <vscale x 8 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v9, (a0), v8
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg4e.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    <vscale x 8 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg4e.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg4e_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i8> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg4e.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    <vscale x 8 x i8> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg5e.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg5e_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, <vscale x 8 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v9, (a0), v8
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg5e.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    <vscale x 8 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg5e.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg5e_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i8> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg5e.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    <vscale x 8 x i8> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg6e.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg6e_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, <vscale x 8 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v9, (a0), v8
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg6e.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    <vscale x 8 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg6e.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg6e_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i8> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg6e.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    <vscale x 8 x i8> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg7e.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg7e_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, <vscale x 8 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v9, (a0), v8
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg7e.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    <vscale x 8 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg7e.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg7e_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i8> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg7e.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    <vscale x 8 x i8> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg8e.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg8e_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, <vscale x 8 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v9, (a0), v8
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg8e.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    <vscale x 8 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg8e.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  <vscale x 8 x i8>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlxseg8e_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i8> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlxseg8e.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    <vscale x 8 x i8> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg2e.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  <vscale x 16 x i8>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlxseg2e_v_nxv16i8_nxv16i8(<vscale x 16 x i8>* %0, <vscale x 16 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg2e.nxv16i8.nxv16i8(
    <vscale x 16 x i8> undef, <vscale x 16 x i8> undef,
    <vscale x 16 x i8>* %0,
    <vscale x 16 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg2e.mask.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  <vscale x 16 x i8>,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlxseg2e_mask_v_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8>* %1, <vscale x 16 x i8> %2, <vscale x 16 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v6, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg2e.mask.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0, <vscale x 16 x i8> %0,
    <vscale x 16 x i8>* %1,
    <vscale x 16 x i8> %2,
    <vscale x 16 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg3e.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  <vscale x 16 x i8>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlxseg3e_v_nxv16i8_nxv16i8(<vscale x 16 x i8>* %0, <vscale x 16 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg3e.nxv16i8.nxv16i8(
    <vscale x 16 x i8> undef, <vscale x 16 x i8> undef, <vscale x 16 x i8> undef,
    <vscale x 16 x i8>* %0,
    <vscale x 16 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg3e.mask.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  <vscale x 16 x i8>,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlxseg3e_mask_v_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8>* %1, <vscale x 16 x i8> %2, <vscale x 16 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg3e.mask.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0, <vscale x 16 x i8> %0, <vscale x 16 x i8> %0,
    <vscale x 16 x i8>* %1,
    <vscale x 16 x i8> %2,
    <vscale x 16 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg4e.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  <vscale x 16 x i8>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlxseg4e_v_nxv16i8_nxv16i8(<vscale x 16 x i8>* %0, <vscale x 16 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg4e.nxv16i8.nxv16i8(
    <vscale x 16 x i8> undef, <vscale x 16 x i8> undef, <vscale x 16 x i8> undef, <vscale x 16 x i8> undef,
    <vscale x 16 x i8>* %0,
    <vscale x 16 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg4e.mask.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  <vscale x 16 x i8>,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlxseg4e_mask_v_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8>* %1, <vscale x 16 x i8> %2, <vscale x 16 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlxseg4e.mask.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0, <vscale x 16 x i8> %0, <vscale x 16 x i8> %0, <vscale x 16 x i8> %0,
    <vscale x 16 x i8>* %1,
    <vscale x 16 x i8> %2,
    <vscale x 16 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlxseg2e.nxv32i8.nxv32i8(
  <vscale x 32 x i8>, <vscale x 32 x i8>,
  <vscale x 32 x i8>*,
  <vscale x 32 x i8>,
  iXLen);

define <vscale x 32 x i8> @intrinsic_vlxseg2e_v_nxv32i8_nxv32i8(<vscale x 32 x i8>* %0, <vscale x 32 x i8> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv32i8_nxv32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v12, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlxseg2e.nxv32i8.nxv32i8(
    <vscale x 32 x i8> undef, <vscale x 32 x i8> undef,
    <vscale x 32 x i8>* %0,
    <vscale x 32 x i8> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 32 x i8>, <vscale x 32 x i8> } %a, 1
  ret <vscale x 32 x i8> %b
}

declare { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlxseg2e.mask.nxv32i8.nxv32i8(
  <vscale x 32 x i8>, <vscale x 32 x i8>,
  <vscale x 32 x i8>*,
  <vscale x 32 x i8>,
  <vscale x 32 x i1>,
  iXLen);

define <vscale x 32 x i8> @intrinsic_vlxseg2e_mask_v_nxv32i8_nxv32i8(<vscale x 32 x i8> %0, <vscale x 32 x i8>* %1, <vscale x 32 x i8> %2, <vscale x 32 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv32i8_nxv32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e8, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v4, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlxseg2e.mask.nxv32i8.nxv32i8(
    <vscale x 32 x i8> %0, <vscale x 32 x i8> %0,
    <vscale x 32 x i8>* %1,
    <vscale x 32 x i8> %2,
    <vscale x 32 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 32 x i8>, <vscale x 32 x i8> } %a, 1
  ret <vscale x 32 x i8> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg2e.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg2e_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg2e.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg2e.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg2e_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i16> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v7, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg2e.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    <vscale x 4 x i16> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg3e.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg3e_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg3e.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg3e.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg3e_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i16> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg3e.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    <vscale x 4 x i16> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg4e.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg4e_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg4e.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg4e.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg4e_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i16> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg4e.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    <vscale x 4 x i16> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg5e.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg5e_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg5e.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg5e.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg5e_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i16> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg5e.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    <vscale x 4 x i16> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg6e.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg6e_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg6e.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg6e.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg6e_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i16> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg6e.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    <vscale x 4 x i16> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg7e.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg7e_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg7e.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg7e.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg7e_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i16> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg7e.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    <vscale x 4 x i16> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg8e.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg8e_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg8e.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg8e.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i16>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlxseg8e_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i16> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlxseg8e.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    <vscale x 4 x i16> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg2e.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i16>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlxseg2e_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, <vscale x 8 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg2e.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    <vscale x 8 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg2e.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i16>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlxseg2e_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16>* %1, <vscale x 8 x i16> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v6, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg2e.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0, <vscale x 8 x i16> %0,
    <vscale x 8 x i16>* %1,
    <vscale x 8 x i16> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg3e.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i16>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlxseg3e_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, <vscale x 8 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg3e.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    <vscale x 8 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg3e.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i16>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlxseg3e_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16>* %1, <vscale x 8 x i16> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg3e.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0, <vscale x 8 x i16> %0, <vscale x 8 x i16> %0,
    <vscale x 8 x i16>* %1,
    <vscale x 8 x i16> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg4e.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i16>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlxseg4e_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, <vscale x 8 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg4e.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    <vscale x 8 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg4e.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i16>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlxseg4e_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16>* %1, <vscale x 8 x i16> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlxseg4e.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0, <vscale x 8 x i16> %0, <vscale x 8 x i16> %0, <vscale x 8 x i16> %0,
    <vscale x 8 x i16>* %1,
    <vscale x 8 x i16> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlxseg2e.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  <vscale x 16 x i16>,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlxseg2e_v_nxv16i16_nxv16i16(<vscale x 16 x i16>* %0, <vscale x 16 x i16> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v12, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlxseg2e.nxv16i16.nxv16i16(
    <vscale x 16 x i16> undef, <vscale x 16 x i16> undef,
    <vscale x 16 x i16>* %0,
    <vscale x 16 x i16> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlxseg2e.mask.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  <vscale x 16 x i16>,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlxseg2e_mask_v_nxv16i16_nxv16i16(<vscale x 16 x i16> %0, <vscale x 16 x i16>* %1, <vscale x 16 x i16> %2, <vscale x 16 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v4, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlxseg2e.mask.nxv16i16.nxv16i16(
    <vscale x 16 x i16> %0, <vscale x 16 x i16> %0,
    <vscale x 16 x i16>* %1,
    <vscale x 16 x i16> %2,
    <vscale x 16 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg2e.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg2e_v_nxv4f16_nxv4f16(<vscale x 4 x half>* %0, <vscale x 4 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg2e.nxv4f16.nxv4f16(
    <vscale x 4 x half> undef, <vscale x 4 x half> undef,
    <vscale x 4 x half>* %0,
    <vscale x 4 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg2e.mask.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg2e_mask_v_nxv4f16_nxv4f16( <vscale x 4 x half> %0, <vscale x 4 x half>* %1, <vscale x 4 x half> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v7, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg2e.mask.nxv4f16.nxv4f16(
    <vscale x 4 x half> %0, <vscale x 4 x half> %0,
    <vscale x 4 x half>* %1,
    <vscale x 4 x half> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg3e.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg3e_v_nxv4f16_nxv4f16(<vscale x 4 x half>* %0, <vscale x 4 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg3e.nxv4f16.nxv4f16(
    <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef,
    <vscale x 4 x half>* %0,
    <vscale x 4 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg3e.mask.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg3e_mask_v_nxv4f16_nxv4f16( <vscale x 4 x half> %0, <vscale x 4 x half>* %1, <vscale x 4 x half> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg3e.mask.nxv4f16.nxv4f16(
    <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0,
    <vscale x 4 x half>* %1,
    <vscale x 4 x half> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg4e.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg4e_v_nxv4f16_nxv4f16(<vscale x 4 x half>* %0, <vscale x 4 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg4e.nxv4f16.nxv4f16(
    <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef,
    <vscale x 4 x half>* %0,
    <vscale x 4 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg4e.mask.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg4e_mask_v_nxv4f16_nxv4f16( <vscale x 4 x half> %0, <vscale x 4 x half>* %1, <vscale x 4 x half> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg4e.mask.nxv4f16.nxv4f16(
    <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0,
    <vscale x 4 x half>* %1,
    <vscale x 4 x half> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg5e.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg5e_v_nxv4f16_nxv4f16(<vscale x 4 x half>* %0, <vscale x 4 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg5e.nxv4f16.nxv4f16(
    <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef,
    <vscale x 4 x half>* %0,
    <vscale x 4 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg5e.mask.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg5e_mask_v_nxv4f16_nxv4f16( <vscale x 4 x half> %0, <vscale x 4 x half>* %1, <vscale x 4 x half> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_mask_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg5e.mask.nxv4f16.nxv4f16(
    <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0,
    <vscale x 4 x half>* %1,
    <vscale x 4 x half> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg6e.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg6e_v_nxv4f16_nxv4f16(<vscale x 4 x half>* %0, <vscale x 4 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg6e.nxv4f16.nxv4f16(
    <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef,
    <vscale x 4 x half>* %0,
    <vscale x 4 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg6e.mask.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg6e_mask_v_nxv4f16_nxv4f16( <vscale x 4 x half> %0, <vscale x 4 x half>* %1, <vscale x 4 x half> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_mask_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg6e.mask.nxv4f16.nxv4f16(
    <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0,
    <vscale x 4 x half>* %1,
    <vscale x 4 x half> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg7e.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg7e_v_nxv4f16_nxv4f16(<vscale x 4 x half>* %0, <vscale x 4 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg7e.nxv4f16.nxv4f16(
    <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef,
    <vscale x 4 x half>* %0,
    <vscale x 4 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg7e.mask.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg7e_mask_v_nxv4f16_nxv4f16( <vscale x 4 x half> %0, <vscale x 4 x half>* %1, <vscale x 4 x half> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_mask_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg7e.mask.nxv4f16.nxv4f16(
    <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0,
    <vscale x 4 x half>* %1,
    <vscale x 4 x half> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg8e.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg8e_v_nxv4f16_nxv4f16(<vscale x 4 x half>* %0, <vscale x 4 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg8e.nxv4f16.nxv4f16(
    <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef, <vscale x 4 x half> undef,
    <vscale x 4 x half>* %0,
    <vscale x 4 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg8e.mask.nxv4f16.nxv4f16(
  <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>,
  <vscale x 4 x half>*,
  <vscale x 4 x half>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x half> @intrinsic_vlxseg8e_mask_v_nxv4f16_nxv4f16( <vscale x 4 x half> %0, <vscale x 4 x half>* %1, <vscale x 4 x half> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_mask_v_nxv4f16_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } @llvm.riscv.th.vlxseg8e.mask.nxv4f16.nxv4f16(
    <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0, <vscale x 4 x half> %0,
    <vscale x 4 x half>* %1,
    <vscale x 4 x half> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half>, <vscale x 4 x half> } %a, 1
  ret <vscale x 4 x half> %b
}

declare { <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg2e.nxv8f16.nxv8f16(
  <vscale x 8 x half>, <vscale x 8 x half>,
  <vscale x 8 x half>*,
  <vscale x 8 x half>,
  iXLen);

define <vscale x 8 x half> @intrinsic_vlxseg2e_v_nxv8f16_nxv8f16(<vscale x 8 x half>* %0, <vscale x 8 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv8f16_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg2e.nxv8f16.nxv8f16(
    <vscale x 8 x half> undef, <vscale x 8 x half> undef,
    <vscale x 8 x half>* %0,
    <vscale x 8 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x half>, <vscale x 8 x half> } %a, 1
  ret <vscale x 8 x half> %b
}

declare { <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg2e.mask.nxv8f16.nxv8f16(
  <vscale x 8 x half>, <vscale x 8 x half>,
  <vscale x 8 x half>*,
  <vscale x 8 x half>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x half> @intrinsic_vlxseg2e_mask_v_nxv8f16_nxv8f16( <vscale x 8 x half> %0, <vscale x 8 x half>* %1, <vscale x 8 x half> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv8f16_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v6, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg2e.mask.nxv8f16.nxv8f16(
    <vscale x 8 x half> %0, <vscale x 8 x half> %0,
    <vscale x 8 x half>* %1,
    <vscale x 8 x half> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x half>, <vscale x 8 x half> } %a, 1
  ret <vscale x 8 x half> %b
}

declare { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg3e.nxv8f16.nxv8f16(
  <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>,
  <vscale x 8 x half>*,
  <vscale x 8 x half>,
  iXLen);

define <vscale x 8 x half> @intrinsic_vlxseg3e_v_nxv8f16_nxv8f16(<vscale x 8 x half>* %0, <vscale x 8 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv8f16_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg3e.nxv8f16.nxv8f16(
    <vscale x 8 x half> undef, <vscale x 8 x half> undef, <vscale x 8 x half> undef,
    <vscale x 8 x half>* %0,
    <vscale x 8 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } %a, 1
  ret <vscale x 8 x half> %b
}

declare { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg3e.mask.nxv8f16.nxv8f16(
  <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>,
  <vscale x 8 x half>*,
  <vscale x 8 x half>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x half> @intrinsic_vlxseg3e_mask_v_nxv8f16_nxv8f16( <vscale x 8 x half> %0, <vscale x 8 x half>* %1, <vscale x 8 x half> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv8f16_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg3e.mask.nxv8f16.nxv8f16(
    <vscale x 8 x half> %0, <vscale x 8 x half> %0, <vscale x 8 x half> %0,
    <vscale x 8 x half>* %1,
    <vscale x 8 x half> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } %a, 1
  ret <vscale x 8 x half> %b
}

declare { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg4e.nxv8f16.nxv8f16(
  <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>,
  <vscale x 8 x half>*,
  <vscale x 8 x half>,
  iXLen);

define <vscale x 8 x half> @intrinsic_vlxseg4e_v_nxv8f16_nxv8f16(<vscale x 8 x half>* %0, <vscale x 8 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv8f16_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg4e.nxv8f16.nxv8f16(
    <vscale x 8 x half> undef, <vscale x 8 x half> undef, <vscale x 8 x half> undef, <vscale x 8 x half> undef,
    <vscale x 8 x half>* %0,
    <vscale x 8 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } %a, 1
  ret <vscale x 8 x half> %b
}

declare { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg4e.mask.nxv8f16.nxv8f16(
  <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>,
  <vscale x 8 x half>*,
  <vscale x 8 x half>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x half> @intrinsic_vlxseg4e_mask_v_nxv8f16_nxv8f16( <vscale x 8 x half> %0, <vscale x 8 x half>* %1, <vscale x 8 x half> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv8f16_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } @llvm.riscv.th.vlxseg4e.mask.nxv8f16.nxv8f16(
    <vscale x 8 x half> %0, <vscale x 8 x half> %0, <vscale x 8 x half> %0, <vscale x 8 x half> %0,
    <vscale x 8 x half>* %1,
    <vscale x 8 x half> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half>, <vscale x 8 x half> } %a, 1
  ret <vscale x 8 x half> %b
}

declare { <vscale x 16 x half>, <vscale x 16 x half> } @llvm.riscv.th.vlxseg2e.nxv16f16.nxv16f16(
  <vscale x 16 x half>, <vscale x 16 x half>,
  <vscale x 16 x half>*,
  <vscale x 16 x half>,
  iXLen);

define <vscale x 16 x half> @intrinsic_vlxseg2e_v_nxv16f16_nxv16f16(<vscale x 16 x half>* %0, <vscale x 16 x half> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv16f16_nxv16f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v12, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x half>, <vscale x 16 x half> } @llvm.riscv.th.vlxseg2e.nxv16f16.nxv16f16(
    <vscale x 16 x half> undef, <vscale x 16 x half> undef,
    <vscale x 16 x half>* %0,
    <vscale x 16 x half> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x half>, <vscale x 16 x half> } %a, 1
  ret <vscale x 16 x half> %b
}

declare { <vscale x 16 x half>, <vscale x 16 x half> } @llvm.riscv.th.vlxseg2e.mask.nxv16f16.nxv16f16(
  <vscale x 16 x half>, <vscale x 16 x half>,
  <vscale x 16 x half>*,
  <vscale x 16 x half>,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x half> @intrinsic_vlxseg2e_mask_v_nxv16f16_nxv16f16( <vscale x 16 x half> %0, <vscale x 16 x half>* %1, <vscale x 16 x half> %2, <vscale x 16 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv16f16_nxv16f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v4, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x half>, <vscale x 16 x half> } @llvm.riscv.th.vlxseg2e.mask.nxv16f16.nxv16f16(
    <vscale x 16 x half> %0, <vscale x 16 x half> %0,
    <vscale x 16 x half>* %1,
    <vscale x 16 x half> %2,
    <vscale x 16 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x half>, <vscale x 16 x half> } %a, 1
  ret <vscale x 16 x half> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg2e.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg2e_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg2e.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg2e.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg2e_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i32> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v7, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg2e.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    <vscale x 2 x i32> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg3e.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg3e_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg3e.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg3e.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg3e_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i32> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg3e.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    <vscale x 2 x i32> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg4e.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg4e_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg4e.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg4e.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg4e_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i32> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg4e.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    <vscale x 2 x i32> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg5e.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg5e_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg5e.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg5e.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg5e_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i32> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg5e.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    <vscale x 2 x i32> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg6e.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg6e_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg6e.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg6e.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg6e_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i32> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg6e.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    <vscale x 2 x i32> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg7e.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg7e_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg7e.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg7e.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg7e_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i32> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg7e.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    <vscale x 2 x i32> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg8e.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg8e_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg8e.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg8e.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i32>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlxseg8e_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i32> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlxseg8e.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    <vscale x 2 x i32> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg2e.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i32>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlxseg2e_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, <vscale x 4 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg2e.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    <vscale x 4 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg2e.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i32>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlxseg2e_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i32> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v6, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg2e.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    <vscale x 4 x i32> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg3e.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i32>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlxseg3e_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, <vscale x 4 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg3e.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    <vscale x 4 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg3e.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i32>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlxseg3e_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i32> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg3e.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    <vscale x 4 x i32> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg4e.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i32>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlxseg4e_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, <vscale x 4 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg4e.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    <vscale x 4 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg4e.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i32>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlxseg4e_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i32> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlxseg4e.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    <vscale x 4 x i32> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlxseg2e.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  <vscale x 8 x i32>,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlxseg2e_v_nxv8i32_nxv8i32(<vscale x 8 x i32>* %0, <vscale x 8 x i32> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v12, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlxseg2e.nxv8i32.nxv8i32(
    <vscale x 8 x i32> undef, <vscale x 8 x i32> undef,
    <vscale x 8 x i32>* %0,
    <vscale x 8 x i32> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlxseg2e.mask.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  <vscale x 8 x i32>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlxseg2e_mask_v_nxv8i32_nxv8i32(<vscale x 8 x i32> %0, <vscale x 8 x i32>* %1, <vscale x 8 x i32> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v4, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlxseg2e.mask.nxv8i32.nxv8i32(
    <vscale x 8 x i32> %0, <vscale x 8 x i32> %0,
    <vscale x 8 x i32>* %1,
    <vscale x 8 x i32> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg2e.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg2e_v_nxv2f32_nxv2f32(<vscale x 2 x float>* %0, <vscale x 2 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg2e.nxv2f32.nxv2f32(
    <vscale x 2 x float> undef, <vscale x 2 x float> undef,
    <vscale x 2 x float>* %0,
    <vscale x 2 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg2e.mask.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg2e_mask_v_nxv2f32_nxv2f32( <vscale x 2 x float> %0, <vscale x 2 x float>* %1, <vscale x 2 x float> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg2e.v v7, (a0), v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg2e.mask.nxv2f32.nxv2f32(
    <vscale x 2 x float> %0, <vscale x 2 x float> %0,
    <vscale x 2 x float>* %1,
    <vscale x 2 x float> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg3e.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg3e_v_nxv2f32_nxv2f32(<vscale x 2 x float>* %0, <vscale x 2 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg3e.nxv2f32.nxv2f32(
    <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef,
    <vscale x 2 x float>* %0,
    <vscale x 2 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg3e.mask.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg3e_mask_v_nxv2f32_nxv2f32( <vscale x 2 x float> %0, <vscale x 2 x float>* %1, <vscale x 2 x float> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg3e.mask.nxv2f32.nxv2f32(
    <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0,
    <vscale x 2 x float>* %1,
    <vscale x 2 x float> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg4e.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg4e_v_nxv2f32_nxv2f32(<vscale x 2 x float>* %0, <vscale x 2 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg4e.nxv2f32.nxv2f32(
    <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef,
    <vscale x 2 x float>* %0,
    <vscale x 2 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg4e.mask.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg4e_mask_v_nxv2f32_nxv2f32( <vscale x 2 x float> %0, <vscale x 2 x float>* %1, <vscale x 2 x float> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg4e.mask.nxv2f32.nxv2f32(
    <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0,
    <vscale x 2 x float>* %1,
    <vscale x 2 x float> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg5e.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg5e_v_nxv2f32_nxv2f32(<vscale x 2 x float>* %0, <vscale x 2 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg5e.nxv2f32.nxv2f32(
    <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef,
    <vscale x 2 x float>* %0,
    <vscale x 2 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg5e.mask.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg5e_mask_v_nxv2f32_nxv2f32( <vscale x 2 x float> %0, <vscale x 2 x float>* %1, <vscale x 2 x float> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5e_mask_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg5e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg5e.mask.nxv2f32.nxv2f32(
    <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0,
    <vscale x 2 x float>* %1,
    <vscale x 2 x float> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg6e.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg6e_v_nxv2f32_nxv2f32(<vscale x 2 x float>* %0, <vscale x 2 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg6e.nxv2f32.nxv2f32(
    <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef,
    <vscale x 2 x float>* %0,
    <vscale x 2 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg6e.mask.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg6e_mask_v_nxv2f32_nxv2f32( <vscale x 2 x float> %0, <vscale x 2 x float>* %1, <vscale x 2 x float> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6e_mask_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg6e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg6e.mask.nxv2f32.nxv2f32(
    <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0,
    <vscale x 2 x float>* %1,
    <vscale x 2 x float> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg7e.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg7e_v_nxv2f32_nxv2f32(<vscale x 2 x float>* %0, <vscale x 2 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg7e.nxv2f32.nxv2f32(
    <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef,
    <vscale x 2 x float>* %0,
    <vscale x 2 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg7e.mask.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg7e_mask_v_nxv2f32_nxv2f32( <vscale x 2 x float> %0, <vscale x 2 x float>* %1, <vscale x 2 x float> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7e_mask_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg7e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg7e.mask.nxv2f32.nxv2f32(
    <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0,
    <vscale x 2 x float>* %1,
    <vscale x 2 x float> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg8e.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg8e_v_nxv2f32_nxv2f32(<vscale x 2 x float>* %0, <vscale x 2 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg8e.nxv2f32.nxv2f32(
    <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef, <vscale x 2 x float> undef,
    <vscale x 2 x float>* %0,
    <vscale x 2 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg8e.mask.nxv2f32.nxv2f32(
  <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>,
  <vscale x 2 x float>*,
  <vscale x 2 x float>,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x float> @intrinsic_vlxseg8e_mask_v_nxv2f32_nxv2f32( <vscale x 2 x float> %0, <vscale x 2 x float>* %1, <vscale x 2 x float> %2, <vscale x 2 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8e_mask_v_nxv2f32_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlxseg8e.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } @llvm.riscv.th.vlxseg8e.mask.nxv2f32.nxv2f32(
    <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0, <vscale x 2 x float> %0,
    <vscale x 2 x float>* %1,
    <vscale x 2 x float> %2,
    <vscale x 2 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float> } %a, 1
  ret <vscale x 2 x float> %b
}

declare { <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg2e.nxv4f32.nxv4f32(
  <vscale x 4 x float>, <vscale x 4 x float>,
  <vscale x 4 x float>*,
  <vscale x 4 x float>,
  iXLen);

define <vscale x 4 x float> @intrinsic_vlxseg2e_v_nxv4f32_nxv4f32(<vscale x 4 x float>* %0, <vscale x 4 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv4f32_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg2e.nxv4f32.nxv4f32(
    <vscale x 4 x float> undef, <vscale x 4 x float> undef,
    <vscale x 4 x float>* %0,
    <vscale x 4 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x float>, <vscale x 4 x float> } %a, 1
  ret <vscale x 4 x float> %b
}

declare { <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg2e.mask.nxv4f32.nxv4f32(
  <vscale x 4 x float>, <vscale x 4 x float>,
  <vscale x 4 x float>*,
  <vscale x 4 x float>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x float> @intrinsic_vlxseg2e_mask_v_nxv4f32_nxv4f32( <vscale x 4 x float> %0, <vscale x 4 x float>* %1, <vscale x 4 x float> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv4f32_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg2e.v v6, (a0), v10, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg2e.mask.nxv4f32.nxv4f32(
    <vscale x 4 x float> %0, <vscale x 4 x float> %0,
    <vscale x 4 x float>* %1,
    <vscale x 4 x float> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x float>, <vscale x 4 x float> } %a, 1
  ret <vscale x 4 x float> %b
}

declare { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg3e.nxv4f32.nxv4f32(
  <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>,
  <vscale x 4 x float>*,
  <vscale x 4 x float>,
  iXLen);

define <vscale x 4 x float> @intrinsic_vlxseg3e_v_nxv4f32_nxv4f32(<vscale x 4 x float>* %0, <vscale x 4 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_v_nxv4f32_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg3e.nxv4f32.nxv4f32(
    <vscale x 4 x float> undef, <vscale x 4 x float> undef, <vscale x 4 x float> undef,
    <vscale x 4 x float>* %0,
    <vscale x 4 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } %a, 1
  ret <vscale x 4 x float> %b
}

declare { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg3e.mask.nxv4f32.nxv4f32(
  <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>,
  <vscale x 4 x float>*,
  <vscale x 4 x float>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x float> @intrinsic_vlxseg3e_mask_v_nxv4f32_nxv4f32( <vscale x 4 x float> %0, <vscale x 4 x float>* %1, <vscale x 4 x float> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3e_mask_v_nxv4f32_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg3e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg3e.mask.nxv4f32.nxv4f32(
    <vscale x 4 x float> %0, <vscale x 4 x float> %0, <vscale x 4 x float> %0,
    <vscale x 4 x float>* %1,
    <vscale x 4 x float> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } %a, 1
  ret <vscale x 4 x float> %b
}

declare { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg4e.nxv4f32.nxv4f32(
  <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>,
  <vscale x 4 x float>*,
  <vscale x 4 x float>,
  iXLen);

define <vscale x 4 x float> @intrinsic_vlxseg4e_v_nxv4f32_nxv4f32(<vscale x 4 x float>* %0, <vscale x 4 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_v_nxv4f32_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg4e.nxv4f32.nxv4f32(
    <vscale x 4 x float> undef, <vscale x 4 x float> undef, <vscale x 4 x float> undef, <vscale x 4 x float> undef,
    <vscale x 4 x float>* %0,
    <vscale x 4 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } %a, 1
  ret <vscale x 4 x float> %b
}

declare { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg4e.mask.nxv4f32.nxv4f32(
  <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>,
  <vscale x 4 x float>*,
  <vscale x 4 x float>,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x float> @intrinsic_vlxseg4e_mask_v_nxv4f32_nxv4f32( <vscale x 4 x float> %0, <vscale x 4 x float>* %1, <vscale x 4 x float> %2, <vscale x 4 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4e_mask_v_nxv4f32_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlxseg4e.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } @llvm.riscv.th.vlxseg4e.mask.nxv4f32.nxv4f32(
    <vscale x 4 x float> %0, <vscale x 4 x float> %0, <vscale x 4 x float> %0, <vscale x 4 x float> %0,
    <vscale x 4 x float>* %1,
    <vscale x 4 x float> %2,
    <vscale x 4 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x float> } %a, 1
  ret <vscale x 4 x float> %b
}

declare { <vscale x 8 x float>, <vscale x 8 x float> } @llvm.riscv.th.vlxseg2e.nxv8f32.nxv8f32(
  <vscale x 8 x float>, <vscale x 8 x float>,
  <vscale x 8 x float>*,
  <vscale x 8 x float>,
  iXLen);

define <vscale x 8 x float> @intrinsic_vlxseg2e_v_nxv8f32_nxv8f32(<vscale x 8 x float>* %0, <vscale x 8 x float> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_v_nxv8f32_nxv8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v12, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x float>, <vscale x 8 x float> } @llvm.riscv.th.vlxseg2e.nxv8f32.nxv8f32(
    <vscale x 8 x float> undef, <vscale x 8 x float> undef,
    <vscale x 8 x float>* %0,
    <vscale x 8 x float> %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x float>, <vscale x 8 x float> } %a, 1
  ret <vscale x 8 x float> %b
}

declare { <vscale x 8 x float>, <vscale x 8 x float> } @llvm.riscv.th.vlxseg2e.mask.nxv8f32.nxv8f32(
  <vscale x 8 x float>, <vscale x 8 x float>,
  <vscale x 8 x float>*,
  <vscale x 8 x float>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x float> @intrinsic_vlxseg2e_mask_v_nxv8f32_nxv8f32( <vscale x 8 x float> %0, <vscale x 8 x float>* %1, <vscale x 8 x float> %2, <vscale x 8 x i1> %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2e_mask_v_nxv8f32_nxv8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m4, d1
; CHECK-NEXT:    th.vlxseg2e.v v4, (a0), v12, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x float>, <vscale x 8 x float> } @llvm.riscv.th.vlxseg2e.mask.nxv8f32.nxv8f32(
    <vscale x 8 x float> %0, <vscale x 8 x float> %0,
    <vscale x 8 x float>* %1,
    <vscale x 8 x float> %2,
    <vscale x 8 x i1> %3,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x float>, <vscale x 8 x float> } %a, 1
  ret <vscale x 8 x float> %b
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-LABEL: {{.*}}
; CHECK-NEXT: {{.*}}

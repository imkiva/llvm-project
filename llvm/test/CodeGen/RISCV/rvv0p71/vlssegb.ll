; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT

declare { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg2b.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg2b_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg2b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg2b.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg2b.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg2b_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg2b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg2b.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg2bu.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg2bu_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg2bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg2bu.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg2bu.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg2bu_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg2bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg2bu.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg3b.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg3b_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg3b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg3b.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg3b.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg3b_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg3b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg3b.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg3bu.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg3bu_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg3bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg3bu.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg3bu.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg3bu_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg3bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg3bu.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg4b.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg4b_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg4b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg4b.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg4b.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg4b_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg4b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg4b.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg4bu.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg4bu_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg4bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg4bu.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg4bu.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg4bu_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg4bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg4bu.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg5b.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg5b_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5b_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg5b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg5b.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg5b.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg5b_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5b_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg5b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg5b.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg5bu.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg5bu_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5bu_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg5bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg5bu.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg5bu.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg5bu_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5bu_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg5bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg5bu.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg6b.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg6b_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6b_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg6b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg6b.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg6b.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg6b_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6b_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg6b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg6b.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg6bu.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg6bu_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6bu_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg6bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg6bu.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg6bu.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg6bu_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6bu_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg6bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg6bu.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg7b.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg7b_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7b_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg7b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg7b.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg7b.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg7b_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7b_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg7b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg7b.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg7bu.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg7bu_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7bu_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg7bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg7bu.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg7bu.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg7bu_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7bu_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg7bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg7bu.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg8b.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg8b_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8b_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg8b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg8b.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg8b.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg8b_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8b_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg8b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg8b.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg8bu.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg8bu_v_nxv8i8_nxv8i8(<vscale x 8 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8bu_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg8bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg8bu.nxv8i8.nxv8i8(
    <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef, <vscale x 8 x i8> undef,
    <vscale x 8 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg8bu.mask.nxv8i8.nxv8i8(
  <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>,
  <vscale x 8 x i8>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i8> @intrinsic_vlsseg8bu_mask_v_nxv8i8_nxv8i8(<vscale x 8 x i8> %0, <vscale x 8 x i8>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8bu_mask_v_nxv8i8_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m1, d1
; CHECK-NEXT:    th.vlsseg8bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } @llvm.riscv.th.vlsseg8bu.mask.nxv8i8.nxv8i8(
    <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0, <vscale x 8 x i8> %0,
    <vscale x 8 x i8>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8>, <vscale x 8 x i8> } %a, 1
  ret <vscale x 8 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg2b.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg2b_v_nxv16i8_nxv16i8(<vscale x 16 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg2b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg2b.nxv16i8.nxv16i8(
    <vscale x 16 x i8> undef, <vscale x 16 x i8> undef,
    <vscale x 16 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg2b.mask.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg2b_mask_v_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8>* %1, <vscale x 16 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg2b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg2b.mask.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0, <vscale x 16 x i8> %0,
    <vscale x 16 x i8>* %1,
    iXLen %3,
    <vscale x 16 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg2bu.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg2bu_v_nxv16i8_nxv16i8(<vscale x 16 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg2bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg2bu.nxv16i8.nxv16i8(
    <vscale x 16 x i8> undef, <vscale x 16 x i8> undef,
    <vscale x 16 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg2bu.mask.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg2bu_mask_v_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8>* %1, <vscale x 16 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg2bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg2bu.mask.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0, <vscale x 16 x i8> %0,
    <vscale x 16 x i8>* %1,
    iXLen %3,
    <vscale x 16 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg3b.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg3b_v_nxv16i8_nxv16i8(<vscale x 16 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg3b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg3b.nxv16i8.nxv16i8(
    <vscale x 16 x i8> undef, <vscale x 16 x i8> undef, <vscale x 16 x i8> undef,
    <vscale x 16 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg3b.mask.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg3b_mask_v_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8>* %1, <vscale x 16 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_mask_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg3b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg3b.mask.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0, <vscale x 16 x i8> %0, <vscale x 16 x i8> %0,
    <vscale x 16 x i8>* %1,
    iXLen %3,
    <vscale x 16 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg3bu.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg3bu_v_nxv16i8_nxv16i8(<vscale x 16 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg3bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg3bu.nxv16i8.nxv16i8(
    <vscale x 16 x i8> undef, <vscale x 16 x i8> undef, <vscale x 16 x i8> undef,
    <vscale x 16 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg3bu.mask.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg3bu_mask_v_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8>* %1, <vscale x 16 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_mask_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg3bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg3bu.mask.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0, <vscale x 16 x i8> %0, <vscale x 16 x i8> %0,
    <vscale x 16 x i8>* %1,
    iXLen %3,
    <vscale x 16 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg4b.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg4b_v_nxv16i8_nxv16i8(<vscale x 16 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg4b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg4b.nxv16i8.nxv16i8(
    <vscale x 16 x i8> undef, <vscale x 16 x i8> undef, <vscale x 16 x i8> undef, <vscale x 16 x i8> undef,
    <vscale x 16 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg4b.mask.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg4b_mask_v_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8>* %1, <vscale x 16 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_mask_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg4b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg4b.mask.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0, <vscale x 16 x i8> %0, <vscale x 16 x i8> %0, <vscale x 16 x i8> %0,
    <vscale x 16 x i8>* %1,
    iXLen %3,
    <vscale x 16 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg4bu.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg4bu_v_nxv16i8_nxv16i8(<vscale x 16 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg4bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg4bu.nxv16i8.nxv16i8(
    <vscale x 16 x i8> undef, <vscale x 16 x i8> undef, <vscale x 16 x i8> undef, <vscale x 16 x i8> undef,
    <vscale x 16 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg4bu.mask.nxv16i8.nxv16i8(
  <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>,
  <vscale x 16 x i8>*,
  iXLen,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i8> @intrinsic_vlsseg4bu_mask_v_nxv16i8_nxv16i8(<vscale x 16 x i8> %0, <vscale x 16 x i8>* %1, <vscale x 16 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_mask_v_nxv16i8_nxv16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m2, d1
; CHECK-NEXT:    th.vlsseg4bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } @llvm.riscv.th.vlsseg4bu.mask.nxv16i8.nxv16i8(
    <vscale x 16 x i8> %0, <vscale x 16 x i8> %0, <vscale x 16 x i8> %0, <vscale x 16 x i8> %0,
    <vscale x 16 x i8>* %1,
    iXLen %3,
    <vscale x 16 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8>, <vscale x 16 x i8> } %a, 1
  ret <vscale x 16 x i8> %b
}

declare { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlsseg2b.nxv32i8.nxv32i8(
  <vscale x 32 x i8>, <vscale x 32 x i8>,
  <vscale x 32 x i8>*,
  iXLen,
  iXLen);

define <vscale x 32 x i8> @intrinsic_vlsseg2b_v_nxv32i8_nxv32i8(<vscale x 32 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv32i8_nxv32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m4, d1
; CHECK-NEXT:    th.vlsseg2b.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlsseg2b.nxv32i8.nxv32i8(
    <vscale x 32 x i8> undef, <vscale x 32 x i8> undef,
    <vscale x 32 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 32 x i8>, <vscale x 32 x i8> } %a, 1
  ret <vscale x 32 x i8> %b
}

declare { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlsseg2b.mask.nxv32i8.nxv32i8(
  <vscale x 32 x i8>, <vscale x 32 x i8>,
  <vscale x 32 x i8>*,
  iXLen,
  <vscale x 32 x i1>,
  iXLen);

define <vscale x 32 x i8> @intrinsic_vlsseg2b_mask_v_nxv32i8_nxv32i8(<vscale x 32 x i8> %0, <vscale x 32 x i8>* %1, <vscale x 32 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv32i8_nxv32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m4, d1
; CHECK-NEXT:    th.vlsseg2b.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlsseg2b.mask.nxv32i8.nxv32i8(
    <vscale x 32 x i8> %0, <vscale x 32 x i8> %0,
    <vscale x 32 x i8>* %1,
    iXLen %3,
    <vscale x 32 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 32 x i8>, <vscale x 32 x i8> } %a, 1
  ret <vscale x 32 x i8> %b
}

declare { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlsseg2bu.nxv32i8.nxv32i8(
  <vscale x 32 x i8>, <vscale x 32 x i8>,
  <vscale x 32 x i8>*,
  iXLen,
  iXLen);

define <vscale x 32 x i8> @intrinsic_vlsseg2bu_v_nxv32i8_nxv32i8(<vscale x 32 x i8>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv32i8_nxv32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m4, d1
; CHECK-NEXT:    th.vlsseg2bu.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlsseg2bu.nxv32i8.nxv32i8(
    <vscale x 32 x i8> undef, <vscale x 32 x i8> undef,
    <vscale x 32 x i8>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 32 x i8>, <vscale x 32 x i8> } %a, 1
  ret <vscale x 32 x i8> %b
}

declare { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlsseg2bu.mask.nxv32i8.nxv32i8(
  <vscale x 32 x i8>, <vscale x 32 x i8>,
  <vscale x 32 x i8>*,
  iXLen,
  <vscale x 32 x i1>,
  iXLen);

define <vscale x 32 x i8> @intrinsic_vlsseg2bu_mask_v_nxv32i8_nxv32i8(<vscale x 32 x i8> %0, <vscale x 32 x i8>* %1, <vscale x 32 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv32i8_nxv32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e8, m4, d1
; CHECK-NEXT:    th.vlsseg2bu.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 32 x i8>, <vscale x 32 x i8> } @llvm.riscv.th.vlsseg2bu.mask.nxv32i8.nxv32i8(
    <vscale x 32 x i8> %0, <vscale x 32 x i8> %0,
    <vscale x 32 x i8>* %1,
    iXLen %3,
    <vscale x 32 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 32 x i8>, <vscale x 32 x i8> } %a, 1
  ret <vscale x 32 x i8> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg2b.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg2b_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg2b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg2b.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg2b.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg2b_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg2b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg2b.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg2bu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg2bu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg2bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg2bu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg2bu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg2bu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg2bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg2bu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg3b.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg3b_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg3b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg3b.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg3b.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg3b_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg3b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg3b.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg3bu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg3bu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg3bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg3bu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg3bu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg3bu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg3bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg3bu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg4b.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg4b_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg4b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg4b.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg4b.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg4b_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg4b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg4b.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg4bu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg4bu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg4bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg4bu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg4bu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg4bu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg4bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg4bu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg5b.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg5b_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5b_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg5b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg5b.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg5b.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg5b_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5b_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg5b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg5b.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg5bu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg5bu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5bu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg5bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg5bu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg5bu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg5bu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5bu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg5bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg5bu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg6b.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg6b_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6b_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg6b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg6b.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg6b.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg6b_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6b_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg6b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg6b.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg6bu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg6bu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6bu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg6bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg6bu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg6bu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg6bu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6bu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg6bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg6bu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg7b.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg7b_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7b_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg7b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg7b.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg7b.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg7b_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7b_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg7b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg7b.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg7bu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg7bu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7bu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg7bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg7bu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg7bu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg7bu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7bu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg7bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg7bu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg8b.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg8b_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8b_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg8b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg8b.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg8b.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg8b_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8b_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg8b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg8b.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg8bu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg8bu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8bu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg8bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg8bu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg8bu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlsseg8bu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16> %0, <vscale x 4 x i16>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8bu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m1, d1
; CHECK-NEXT:    th.vlsseg8bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlsseg8bu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0, <vscale x 4 x i16> %0,
    <vscale x 4 x i16>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg2b.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg2b_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg2b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg2b.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg2b.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg2b_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg2b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg2b.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0, <vscale x 8 x i16> %0,
    <vscale x 8 x i16>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg2bu.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg2bu_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg2bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg2bu.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg2bu.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg2bu_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg2bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg2bu.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0, <vscale x 8 x i16> %0,
    <vscale x 8 x i16>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg3b.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg3b_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg3b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg3b.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg3b.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg3b_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg3b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg3b.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0, <vscale x 8 x i16> %0, <vscale x 8 x i16> %0,
    <vscale x 8 x i16>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg3bu.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg3bu_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg3bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg3bu.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg3bu.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg3bu_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg3bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg3bu.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0, <vscale x 8 x i16> %0, <vscale x 8 x i16> %0,
    <vscale x 8 x i16>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg4b.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg4b_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg4b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg4b.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg4b.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg4b_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg4b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg4b.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0, <vscale x 8 x i16> %0, <vscale x 8 x i16> %0, <vscale x 8 x i16> %0,
    <vscale x 8 x i16>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg4bu.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg4bu_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg4bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg4bu.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg4bu.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlsseg4bu_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16> %0, <vscale x 8 x i16>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m2, d1
; CHECK-NEXT:    th.vlsseg4bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlsseg4bu.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %0, <vscale x 8 x i16> %0, <vscale x 8 x i16> %0, <vscale x 8 x i16> %0,
    <vscale x 8 x i16>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlsseg2b.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  iXLen,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlsseg2b_v_nxv16i16_nxv16i16(<vscale x 16 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m4, d1
; CHECK-NEXT:    th.vlsseg2b.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlsseg2b.nxv16i16.nxv16i16(
    <vscale x 16 x i16> undef, <vscale x 16 x i16> undef,
    <vscale x 16 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlsseg2b.mask.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  iXLen,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlsseg2b_mask_v_nxv16i16_nxv16i16(<vscale x 16 x i16> %0, <vscale x 16 x i16>* %1, <vscale x 16 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m4, d1
; CHECK-NEXT:    th.vlsseg2b.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlsseg2b.mask.nxv16i16.nxv16i16(
    <vscale x 16 x i16> %0, <vscale x 16 x i16> %0,
    <vscale x 16 x i16>* %1,
    iXLen %3,
    <vscale x 16 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlsseg2bu.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  iXLen,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlsseg2bu_v_nxv16i16_nxv16i16(<vscale x 16 x i16>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m4, d1
; CHECK-NEXT:    th.vlsseg2bu.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlsseg2bu.nxv16i16.nxv16i16(
    <vscale x 16 x i16> undef, <vscale x 16 x i16> undef,
    <vscale x 16 x i16>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlsseg2bu.mask.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  iXLen,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlsseg2bu_mask_v_nxv16i16_nxv16i16(<vscale x 16 x i16> %0, <vscale x 16 x i16>* %1, <vscale x 16 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e16, m4, d1
; CHECK-NEXT:    th.vlsseg2bu.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlsseg2bu.mask.nxv16i16.nxv16i16(
    <vscale x 16 x i16> %0, <vscale x 16 x i16> %0,
    <vscale x 16 x i16>* %1,
    iXLen %3,
    <vscale x 16 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2b.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg2b_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg2b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2b.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2b.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg2b_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg2b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2b.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2bu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg2bu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg2bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2bu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2bu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg2bu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg2bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg2bu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3b.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg3b_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg3b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3b.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3b.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg3b_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg3b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3b.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3bu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg3bu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg3bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3bu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3bu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg3bu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg3bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg3bu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4b.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg4b_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg4b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4b.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4b.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg4b_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg4b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4b.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4bu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg4bu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg4bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4bu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4bu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg4bu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg4bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg4bu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5b.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg5b_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5b_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg5b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5b.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5b.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg5b_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5b_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg5b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5b.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5bu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg5bu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5bu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg5bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5bu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5bu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg5bu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5bu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg5bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg5bu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6b.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg6b_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6b_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg6b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6b.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6b.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg6b_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6b_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg6b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6b.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6bu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg6bu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6bu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg6bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6bu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6bu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg6bu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6bu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg6bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg6bu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7b.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg7b_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7b_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg7b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7b.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7b.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg7b_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7b_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg7b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7b.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7bu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg7bu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7bu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg7bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7bu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7bu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg7bu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7bu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg7bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg7bu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8b.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg8b_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8b_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg8b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8b.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8b.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg8b_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8b_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg8b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8b.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8bu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg8bu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8bu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg8bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8bu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8bu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlsseg8bu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32> %0, <vscale x 2 x i32>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8bu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m1, d1
; CHECK-NEXT:    th.vlsseg8bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlsseg8bu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0, <vscale x 2 x i32> %0,
    <vscale x 2 x i32>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2b.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg2b_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg2b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2b.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2b.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg2b_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg2b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2b.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2bu.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg2bu_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg2bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2bu.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2bu.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg2bu_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg2bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg2bu.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3b.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg3b_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg3b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3b.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3b.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg3b_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg3b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3b.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3bu.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg3bu_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg3bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3bu.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3bu.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg3bu_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg3bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg3bu.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4b.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg4b_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg4b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4b.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4b.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg4b_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg4b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4b.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4bu.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg4bu_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg4bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4bu.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4bu.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlsseg4bu_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32> %0, <vscale x 4 x i32>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m2, d1
; CHECK-NEXT:    th.vlsseg4bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlsseg4bu.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0, <vscale x 4 x i32> %0,
    <vscale x 4 x i32>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2b.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlsseg2b_v_nxv8i32_nxv8i32(<vscale x 8 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vlsseg2b.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2b.nxv8i32.nxv8i32(
    <vscale x 8 x i32> undef, <vscale x 8 x i32> undef,
    <vscale x 8 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2b.mask.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlsseg2b_mask_v_nxv8i32_nxv8i32(<vscale x 8 x i32> %0, <vscale x 8 x i32>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vlsseg2b.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2b.mask.nxv8i32.nxv8i32(
    <vscale x 8 x i32> %0, <vscale x 8 x i32> %0,
    <vscale x 8 x i32>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2bu.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlsseg2bu_v_nxv8i32_nxv8i32(<vscale x 8 x i32>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vlsseg2bu.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2bu.nxv8i32.nxv8i32(
    <vscale x 8 x i32> undef, <vscale x 8 x i32> undef,
    <vscale x 8 x i32>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2bu.mask.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlsseg2bu_mask_v_nxv8i32_nxv8i32(<vscale x 8 x i32> %0, <vscale x 8 x i32>* %1, <vscale x 8 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e32, m4, d1
; CHECK-NEXT:    th.vlsseg2bu.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlsseg2bu.mask.nxv8i32.nxv8i32(
    <vscale x 8 x i32> %0, <vscale x 8 x i32> %0,
    <vscale x 8 x i32>* %1,
    iXLen %3,
    <vscale x 8 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg2b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg2b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg2b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg2b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg2bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg2bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg2bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg2bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg2bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg3b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg3b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg3b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg3b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg3bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg3bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg3bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg3bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg3bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg4b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg4b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg4b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg4b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg4bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg4bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg4bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg4bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg4bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg5b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg5b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg5b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg5b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg5bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg5bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg5bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg5bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg5bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg5bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg6b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg6b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg6b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg6b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg6bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg6bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg6bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg6bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg6bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg6bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg7b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg7b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg7b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg7b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg7bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg7bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg7bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg7bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg7bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg7bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg8b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg8b.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg8b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg8b.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg8bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg8bu.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlsseg8bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg8bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m1, d1
; CHECK-NEXT:    th.vlsseg8bu.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlsseg8bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    iXLen %3,
    <vscale x 1 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2b.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg2b_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg2b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2b.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2b.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg2b_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg2b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2b.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2bu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg2bu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg2bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2bu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2bu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg2bu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg2bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg2bu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3b.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg3b_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg3b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3b.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3b.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg3b_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3b_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg3b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3b.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3bu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg3bu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg3bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3bu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3bu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg3bu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg3bu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg3bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg3bu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4b.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg4b_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg4b.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4b.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4b.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg4b_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4b_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg4b.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4b.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4bu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg4bu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg4bu.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4bu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4bu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlsseg4bu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg4bu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m2, d1
; CHECK-NEXT:    th.vlsseg4bu.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlsseg4bu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    iXLen %3,
    <vscale x 2 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2b.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlsseg2b_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vlsseg2b.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2b.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2b.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlsseg2b_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2b_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vlsseg2b.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2b.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0, <vscale x 4 x i64> %0,
    <vscale x 4 x i64>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2bu.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlsseg2bu_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, iXLen %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vlsseg2bu.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2bu.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    iXLen %1,
    iXLen %2)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2bu.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlsseg2bu_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i1> %2, iXLen %3, iXLen %4) nounwind {
; CHECK-LABEL: intrinsic_vlsseg2bu_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a3, vl
; CHECK-NEXT:    csrr a4, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a3, a4
; CHECK-NEXT:    th.vsetvli zero, a2, e64, m4, d1
; CHECK-NEXT:    th.vlsseg2bu.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlsseg2bu.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0, <vscale x 4 x i64> %0,
    <vscale x 4 x i64>* %1,
    iXLen %3,
    <vscale x 4 x i1> %2,
    iXLen %4)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-LABEL: {{.*}}
; CHECK-NEXT: {{.*}}

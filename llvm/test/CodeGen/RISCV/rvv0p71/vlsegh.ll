; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg2h.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg2h_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg2h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg2h.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg2h.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg2h_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg2h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg2h.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg2hu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg2hu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg2hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg2hu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg2hu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg2hu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg2hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg2hu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg3h.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg3h_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg3h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg3h.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg3h.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg3h_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg3h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg3h.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg3hu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg3hu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg3hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg3hu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg3hu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg3hu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg3hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg3hu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg4h.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg4h_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg4h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg4h.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg4h.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg4h_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg4h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg4h.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg4hu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg4hu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg4hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg4hu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg4hu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg4hu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg4hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg4hu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg5h.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg5h_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg5h_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg5h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg5h.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg5h.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg5h_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg5h_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg5h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg5h.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg5hu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg5hu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg5hu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg5hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg5hu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg5hu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg5hu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg5hu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg5hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg5hu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg6h.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg6h_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg6h_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg6h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg6h.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg6h.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg6h_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg6h_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg6h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg6h.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg6hu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg6hu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg6hu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg6hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg6hu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg6hu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg6hu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg6hu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg6hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg6hu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg7h.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg7h_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg7h_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg7h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg7h.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg7h.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg7h_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg7h_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg7h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg7h.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg7hu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg7hu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg7hu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg7hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg7hu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg7hu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg7hu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg7hu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg7hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg7hu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg8h.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg8h_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg8h_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg8h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg8h.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg8h.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg8h_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg8h_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg8h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg8h.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg8hu.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg8hu_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg8hu_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg8hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg8hu.nxv4i16.nxv4i16(
    <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef, <vscale x 4 x i16> undef,
    <vscale x 4 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg8hu.mask.nxv4i16.nxv4i16(
  <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>,
  <vscale x 4 x i16>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i16> @intrinsic_vlseg8hu_mask_v_nxv4i16_nxv4i16(<vscale x 4 x i16>* %0, <vscale x 4 x i16> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg8hu_mask_v_nxv4i16_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m1, d1
; CHECK-NEXT:    th.vlseg8hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } @llvm.riscv.th.vlseg8hu.mask.nxv4i16.nxv4i16(
    <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1, <vscale x 4 x i16> %1,
    <vscale x 4 x i16>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16>, <vscale x 4 x i16> } %a, 1
  ret <vscale x 4 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg2h.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg2h_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg2h.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg2h.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg2h.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg2h_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, <vscale x 8 x i16> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg2h.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg2h.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %1, <vscale x 8 x i16> %1,
    <vscale x 8 x i16>* %0,
    <vscale x 8 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg2hu.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg2hu_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg2hu.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg2hu.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg2hu.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg2hu_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, <vscale x 8 x i16> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg2hu.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg2hu.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %1, <vscale x 8 x i16> %1,
    <vscale x 8 x i16>* %0,
    <vscale x 8 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg3h.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg3h_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg3h.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg3h.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg3h.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg3h_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, <vscale x 8 x i16> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg3h.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg3h.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %1, <vscale x 8 x i16> %1, <vscale x 8 x i16> %1,
    <vscale x 8 x i16>* %0,
    <vscale x 8 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg3hu.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg3hu_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg3hu.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg3hu.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg3hu.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg3hu_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, <vscale x 8 x i16> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg3hu.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg3hu.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %1, <vscale x 8 x i16> %1, <vscale x 8 x i16> %1,
    <vscale x 8 x i16>* %0,
    <vscale x 8 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg4h.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg4h_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg4h.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg4h.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg4h.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg4h_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, <vscale x 8 x i16> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg4h.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg4h.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %1, <vscale x 8 x i16> %1, <vscale x 8 x i16> %1, <vscale x 8 x i16> %1,
    <vscale x 8 x i16>* %0,
    <vscale x 8 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg4hu.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg4hu_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg4hu.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg4hu.nxv8i16.nxv8i16(
    <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef, <vscale x 8 x i16> undef,
    <vscale x 8 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg4hu.mask.nxv8i16.nxv8i16(
  <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>,
  <vscale x 8 x i16>*,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i16> @intrinsic_vlseg4hu_mask_v_nxv8i16_nxv8i16(<vscale x 8 x i16>* %0, <vscale x 8 x i16> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_mask_v_nxv8i16_nxv8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m2, d1
; CHECK-NEXT:    th.vlseg4hu.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } @llvm.riscv.th.vlseg4hu.mask.nxv8i16.nxv8i16(
    <vscale x 8 x i16> %1, <vscale x 8 x i16> %1, <vscale x 8 x i16> %1, <vscale x 8 x i16> %1,
    <vscale x 8 x i16>* %0,
    <vscale x 8 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %a, 1
  ret <vscale x 8 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlseg2h.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlseg2h_v_nxv16i16_nxv16i16(<vscale x 16 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m4, d1
; CHECK-NEXT:    th.vlseg2h.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlseg2h.nxv16i16.nxv16i16(
    <vscale x 16 x i16> undef, <vscale x 16 x i16> undef,
    <vscale x 16 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlseg2h.mask.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlseg2h_mask_v_nxv16i16_nxv16i16(<vscale x 16 x i16>* %0, <vscale x 16 x i16> %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_mask_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m4, d1
; CHECK-NEXT:    th.vlseg2h.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlseg2h.mask.nxv16i16.nxv16i16(
    <vscale x 16 x i16> %1, <vscale x 16 x i16> %1,
    <vscale x 16 x i16>* %0,
    <vscale x 16 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlseg2hu.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlseg2hu_v_nxv16i16_nxv16i16(<vscale x 16 x i16>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m4, d1
; CHECK-NEXT:    th.vlseg2hu.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlseg2hu.nxv16i16.nxv16i16(
    <vscale x 16 x i16> undef, <vscale x 16 x i16> undef,
    <vscale x 16 x i16>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlseg2hu.mask.nxv16i16.nxv16i16(
  <vscale x 16 x i16>, <vscale x 16 x i16>,
  <vscale x 16 x i16>*,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i16> @intrinsic_vlseg2hu_mask_v_nxv16i16_nxv16i16(<vscale x 16 x i16>* %0, <vscale x 16 x i16> %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_mask_v_nxv16i16_nxv16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e16, m4, d1
; CHECK-NEXT:    th.vlseg2hu.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 16 x i16>, <vscale x 16 x i16> } @llvm.riscv.th.vlseg2hu.mask.nxv16i16.nxv16i16(
    <vscale x 16 x i16> %1, <vscale x 16 x i16> %1,
    <vscale x 16 x i16>* %0,
    <vscale x 16 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 16 x i16>, <vscale x 16 x i16> } %a, 1
  ret <vscale x 16 x i16> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg2h.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg2h_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg2h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg2h.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg2h.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg2h_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg2h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg2h.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg2hu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg2hu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg2hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg2hu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg2hu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg2hu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg2hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg2hu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg3h.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg3h_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg3h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg3h.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg3h.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg3h_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg3h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg3h.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg3hu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg3hu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg3hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg3hu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg3hu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg3hu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg3hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg3hu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg4h.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg4h_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg4h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg4h.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg4h.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg4h_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg4h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg4h.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg4hu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg4hu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg4hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg4hu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg4hu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg4hu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg4hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg4hu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg5h.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg5h_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg5h_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg5h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg5h.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg5h.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg5h_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg5h_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg5h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg5h.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg5hu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg5hu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg5hu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg5hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg5hu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg5hu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg5hu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg5hu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg5hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg5hu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg6h.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg6h_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg6h_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg6h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg6h.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg6h.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg6h_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg6h_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg6h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg6h.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg6hu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg6hu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg6hu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg6hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg6hu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg6hu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg6hu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg6hu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg6hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg6hu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg7h.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg7h_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg7h_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg7h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg7h.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg7h.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg7h_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg7h_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg7h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg7h.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg7hu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg7hu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg7hu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg7hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg7hu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg7hu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg7hu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg7hu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg7hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg7hu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg8h.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg8h_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg8h_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg8h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg8h.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg8h.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg8h_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg8h_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg8h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg8h.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg8hu.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg8hu_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg8hu_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg8hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg8hu.nxv2i32.nxv2i32(
    <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef, <vscale x 2 x i32> undef,
    <vscale x 2 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg8hu.mask.nxv2i32.nxv2i32(
  <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>,
  <vscale x 2 x i32>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i32> @intrinsic_vlseg8hu_mask_v_nxv2i32_nxv2i32(<vscale x 2 x i32>* %0, <vscale x 2 x i32> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg8hu_mask_v_nxv2i32_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m1, d1
; CHECK-NEXT:    th.vlseg8hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } @llvm.riscv.th.vlseg8hu.mask.nxv2i32.nxv2i32(
    <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1, <vscale x 2 x i32> %1,
    <vscale x 2 x i32>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i32> } %a, 1
  ret <vscale x 2 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg2h.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg2h_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg2h.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg2h.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg2h.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg2h_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, <vscale x 4 x i32> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg2h.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg2h.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %1, <vscale x 4 x i32> %1,
    <vscale x 4 x i32>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg2hu.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg2hu_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg2hu.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg2hu.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg2hu.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg2hu_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, <vscale x 4 x i32> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg2hu.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg2hu.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %1, <vscale x 4 x i32> %1,
    <vscale x 4 x i32>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg3h.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg3h_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg3h.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg3h.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg3h.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg3h_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, <vscale x 4 x i32> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg3h.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg3h.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %1, <vscale x 4 x i32> %1, <vscale x 4 x i32> %1,
    <vscale x 4 x i32>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg3hu.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg3hu_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg3hu.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg3hu.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg3hu.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg3hu_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, <vscale x 4 x i32> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg3hu.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg3hu.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %1, <vscale x 4 x i32> %1, <vscale x 4 x i32> %1,
    <vscale x 4 x i32>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg4h.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg4h_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg4h.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg4h.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg4h.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg4h_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, <vscale x 4 x i32> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg4h.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg4h.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %1, <vscale x 4 x i32> %1, <vscale x 4 x i32> %1, <vscale x 4 x i32> %1,
    <vscale x 4 x i32>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg4hu.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg4hu_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg4hu.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg4hu.nxv4i32.nxv4i32(
    <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef, <vscale x 4 x i32> undef,
    <vscale x 4 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg4hu.mask.nxv4i32.nxv4i32(
  <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>,
  <vscale x 4 x i32>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i32> @intrinsic_vlseg4hu_mask_v_nxv4i32_nxv4i32(<vscale x 4 x i32>* %0, <vscale x 4 x i32> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_mask_v_nxv4i32_nxv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m2, d1
; CHECK-NEXT:    th.vlseg4hu.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } @llvm.riscv.th.vlseg4hu.mask.nxv4i32.nxv4i32(
    <vscale x 4 x i32> %1, <vscale x 4 x i32> %1, <vscale x 4 x i32> %1, <vscale x 4 x i32> %1,
    <vscale x 4 x i32>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %a, 1
  ret <vscale x 4 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlseg2h.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlseg2h_v_nxv8i32_nxv8i32(<vscale x 8 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m4, d1
; CHECK-NEXT:    th.vlseg2h.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlseg2h.nxv8i32.nxv8i32(
    <vscale x 8 x i32> undef, <vscale x 8 x i32> undef,
    <vscale x 8 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlseg2h.mask.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlseg2h_mask_v_nxv8i32_nxv8i32(<vscale x 8 x i32>* %0, <vscale x 8 x i32> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_mask_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m4, d1
; CHECK-NEXT:    th.vlseg2h.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlseg2h.mask.nxv8i32.nxv8i32(
    <vscale x 8 x i32> %1, <vscale x 8 x i32> %1,
    <vscale x 8 x i32>* %0,
    <vscale x 8 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlseg2hu.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlseg2hu_v_nxv8i32_nxv8i32(<vscale x 8 x i32>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m4, d1
; CHECK-NEXT:    th.vlseg2hu.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlseg2hu.nxv8i32.nxv8i32(
    <vscale x 8 x i32> undef, <vscale x 8 x i32> undef,
    <vscale x 8 x i32>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlseg2hu.mask.nxv8i32.nxv8i32(
  <vscale x 8 x i32>, <vscale x 8 x i32>,
  <vscale x 8 x i32>*,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i32> @intrinsic_vlseg2hu_mask_v_nxv8i32_nxv8i32(<vscale x 8 x i32>* %0, <vscale x 8 x i32> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_mask_v_nxv8i32_nxv8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e32, m4, d1
; CHECK-NEXT:    th.vlseg2hu.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 8 x i32>, <vscale x 8 x i32> } @llvm.riscv.th.vlseg2hu.mask.nxv8i32.nxv8i32(
    <vscale x 8 x i32> %1, <vscale x 8 x i32> %1,
    <vscale x 8 x i32>* %0,
    <vscale x 8 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 8 x i32>, <vscale x 8 x i32> } %a, 1
  ret <vscale x 8 x i32> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg2h.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg2h_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg2h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg2h.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg2h.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg2h_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg2h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg2h.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg2hu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg2hu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg2hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg2hu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg2hu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg2hu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg2hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg2hu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg3h.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg3h_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg3h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg3h.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg3h.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg3h_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg3h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg3h.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg3hu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg3hu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg3hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg3hu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg3hu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg3hu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg3hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg3hu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg4h.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg4h_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg4h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg4h.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg4h.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg4h_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg4h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg4h.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg4hu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg4hu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg4hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg4hu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg4hu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg4hu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg4hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg4hu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg5h.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg5h_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg5h_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg5h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg5h.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg5h.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg5h_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg5h_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg5h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg5h.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg5hu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg5hu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg5hu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg5hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg5hu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg5hu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg5hu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg5hu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg5hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg5hu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg6h.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg6h_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg6h_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg6h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg6h.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg6h.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg6h_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg6h_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg6h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg6h.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg6hu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg6hu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg6hu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg6hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg6hu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg6hu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg6hu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg6hu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg6hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg6hu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg7h.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg7h_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg7h_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg7h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg7h.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg7h.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg7h_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg7h_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg7h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg7h.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg7hu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg7hu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg7hu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg7hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg7hu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg7hu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg7hu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg7hu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg7hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg7hu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg8h.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg8h_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg8h_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg8h.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg8h.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg8h.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg8h_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg8h_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg8h.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg8h.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg8hu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg8hu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg8hu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg8hu.v v7, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg8hu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg8hu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i1>,
  iXLen);

define <vscale x 1 x i64> @intrinsic_vlseg8hu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, <vscale x 1 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg8hu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vmv.v.v v9, v8
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlseg8hu.v v7, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlseg8hu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1, <vscale x 1 x i64> %1,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg2h.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg2h_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg2h.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg2h.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg2h.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg2h_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg2h.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg2h.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %1, <vscale x 2 x i64> %1,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg2hu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg2hu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg2hu.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg2hu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg2hu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg2hu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg2hu.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg2hu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %1, <vscale x 2 x i64> %1,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg3h.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg3h_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg3h.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg3h.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg3h.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg3h_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3h_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg3h.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg3h.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %1, <vscale x 2 x i64> %1, <vscale x 2 x i64> %1,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg3hu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg3hu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg3hu.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg3hu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg3hu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg3hu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg3hu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg3hu.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg3hu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %1, <vscale x 2 x i64> %1, <vscale x 2 x i64> %1,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg4h.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg4h_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg4h.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg4h.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg4h.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg4h_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4h_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg4h.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg4h.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %1, <vscale x 2 x i64> %1, <vscale x 2 x i64> %1, <vscale x 2 x i64> %1,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg4hu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg4hu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg4hu.v v6, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg4hu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg4hu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i1>,
  iXLen);

define <vscale x 2 x i64> @intrinsic_vlseg4hu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg4hu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v9
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlseg4hu.v v6, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlseg4hu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %1, <vscale x 2 x i64> %1, <vscale x 2 x i64> %1, <vscale x 2 x i64> %1,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlseg2h.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlseg2h_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlseg2h.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlseg2h.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlseg2h.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlseg2h_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, <vscale x 4 x i64> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2h_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlseg2h.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlseg2h.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %1, <vscale x 4 x i64> %1,
    <vscale x 4 x i64>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlseg2hu.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlseg2hu_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlseg2hu.v v4, (a0)
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlseg2hu.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    iXLen %1)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlseg2hu.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i1>,
  iXLen);

define <vscale x 4 x i64> @intrinsic_vlseg2hu_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, <vscale x 4 x i64> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vlseg2hu_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlseg2hu.v v4, (a0), v0.t
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlseg2hu.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %1, <vscale x 4 x i64> %1,
    <vscale x 4 x i64>* %0,
    <vscale x 4 x i1> %2,
    iXLen %3)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-LABEL: {{.*}}
; CHECK-NEXT: {{.*}}

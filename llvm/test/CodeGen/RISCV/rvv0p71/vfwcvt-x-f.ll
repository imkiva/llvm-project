; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector,+zfh,+d \
; RUN:   -verify-machineinstrs | FileCheck %s
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector,+zfh,+d \
; RUN:   -verify-machineinstrs | FileCheck %s

declare <vscale x 4 x i32> @llvm.riscv.th.vfwcvt.x.f.v.nxv4i32.nxv4f16(
  <vscale x 4 x i32>,
  <vscale x 4 x half>,
  iXLen, iXLen);

define <vscale x 4 x i32> @intrinsic_vfwcvt_x_f_v_nxv4i32_nxv4f16(<vscale x 4 x half> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_x_f_v_nxv4i32_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v10, v8
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vmv.v.v v9, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i32> @llvm.riscv.th.vfwcvt.x.f.v.nxv4i32.nxv4f16(
    <vscale x 4 x i32> undef,
    <vscale x 4 x half> %0,
    iXLen 0, iXLen %1)

  ret <vscale x 4 x i32> %a
}

declare <vscale x 4 x i32> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv4i32.nxv4f16(
  <vscale x 4 x i32>,
  <vscale x 4 x half>,
  <vscale x 4 x i1>,
  iXLen, iXLen);

define <vscale x 4 x i32> @intrinsic_vfwcvt_mask_x_f_v_nxv4i32_nxv4f16(<vscale x 4 x i32> %0, <vscale x 4 x half> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_mask_x_f_v_nxv4i32_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v8, v10, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i32> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv4i32.nxv4f16(
    <vscale x 4 x i32> %0,
    <vscale x 4 x half> %1,
    <vscale x 4 x i1> %2,
    iXLen 0, iXLen %3)

  ret <vscale x 4 x i32> %a
}

declare <vscale x 8 x i32> @llvm.riscv.th.vfwcvt.x.f.v.nxv8i32.nxv8f16(
  <vscale x 8 x i32>,
  <vscale x 8 x half>,
  iXLen, iXLen);

define <vscale x 8 x i32> @intrinsic_vfwcvt_x_f_v_nxv8i32_nxv8f16(<vscale x 8 x half> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_x_f_v_nxv8i32_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v12, v8
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vmv.v.v v10, v14
; CHECK-NEXT:    th.vmv.v.v v11, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i32> @llvm.riscv.th.vfwcvt.x.f.v.nxv8i32.nxv8f16(
    <vscale x 8 x i32> undef,
    <vscale x 8 x half> %0,
    iXLen 0, iXLen %1)

  ret <vscale x 8 x i32> %a
}

declare <vscale x 8 x i32> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv8i32.nxv8f16(
  <vscale x 8 x i32>,
  <vscale x 8 x half>,
  <vscale x 8 x i1>,
  iXLen, iXLen);

define <vscale x 8 x i32> @intrinsic_vfwcvt_mask_x_f_v_nxv8i32_nxv8f16(<vscale x 8 x i32> %0, <vscale x 8 x half> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_mask_x_f_v_nxv8i32_nxv8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v8, v12, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i32> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv8i32.nxv8f16(
    <vscale x 8 x i32> %0,
    <vscale x 8 x half> %1,
    <vscale x 8 x i1> %2,
    iXLen 0, iXLen %3)

  ret <vscale x 8 x i32> %a
}

declare <vscale x 16 x i32> @llvm.riscv.th.vfwcvt.x.f.v.nxv16i32.nxv16f16(
  <vscale x 16 x i32>,
  <vscale x 16 x half>,
  iXLen, iXLen);

define <vscale x 16 x i32> @intrinsic_vfwcvt_x_f_v_nxv16i32_nxv16f16(<vscale x 16 x half> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_x_f_v_nxv16i32_nxv16f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v16, v8
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vmv.v.v v12, v20
; CHECK-NEXT:    th.vmv.v.v v13, v21
; CHECK-NEXT:    th.vmv.v.v v14, v22
; CHECK-NEXT:    th.vmv.v.v v15, v23
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i32> @llvm.riscv.th.vfwcvt.x.f.v.nxv16i32.nxv16f16(
    <vscale x 16 x i32> undef,
    <vscale x 16 x half> %0,
    iXLen 0, iXLen %1)

  ret <vscale x 16 x i32> %a
}

declare <vscale x 16 x i32> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv16i32.nxv16f16(
  <vscale x 16 x i32>,
  <vscale x 16 x half>,
  <vscale x 16 x i1>,
  iXLen, iXLen);

define <vscale x 16 x i32> @intrinsic_vfwcvt_mask_x_f_v_nxv16i32_nxv16f16(<vscale x 16 x i32> %0, <vscale x 16 x half> %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_mask_x_f_v_nxv16i32_nxv16f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e16, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v8, v16, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i32> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv16i32.nxv16f16(
    <vscale x 16 x i32> %0,
    <vscale x 16 x half> %1,
    <vscale x 16 x i1> %2,
    iXLen 0, iXLen %3)

  ret <vscale x 16 x i32> %a
}

declare <vscale x 2 x i64> @llvm.riscv.th.vfwcvt.x.f.v.nxv2i64.nxv2f32(
  <vscale x 2 x i64>,
  <vscale x 2 x float>,
  iXLen, iXLen);

define <vscale x 2 x i64> @intrinsic_vfwcvt_x_f_v_nxv2i64_nxv2f32(<vscale x 2 x float> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_x_f_v_nxv2i64_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v10, v8
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vmv.v.v v9, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x i64> @llvm.riscv.th.vfwcvt.x.f.v.nxv2i64.nxv2f32(
    <vscale x 2 x i64> undef,
    <vscale x 2 x float> %0,
    iXLen 0, iXLen %1)

  ret <vscale x 2 x i64> %a
}

declare <vscale x 2 x i64> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv2i64.nxv2f32(
  <vscale x 2 x i64>,
  <vscale x 2 x float>,
  <vscale x 2 x i1>,
  iXLen, iXLen);

define <vscale x 2 x i64> @intrinsic_vfwcvt_mask_x_f_v_nxv2i64_nxv2f32(<vscale x 2 x i64> %0, <vscale x 2 x float> %1, <vscale x 2 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_mask_x_f_v_nxv2i64_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m1, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v8, v10, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x i64> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv2i64.nxv2f32(
    <vscale x 2 x i64> %0,
    <vscale x 2 x float> %1,
    <vscale x 2 x i1> %2,
    iXLen 0, iXLen %3)

  ret <vscale x 2 x i64> %a
}

declare <vscale x 4 x i64> @llvm.riscv.th.vfwcvt.x.f.v.nxv4i64.nxv4f32(
  <vscale x 4 x i64>,
  <vscale x 4 x float>,
  iXLen, iXLen);

define <vscale x 4 x i64> @intrinsic_vfwcvt_x_f_v_nxv4i64_nxv4f32(<vscale x 4 x float> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_x_f_v_nxv4i64_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v12, v8
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vmv.v.v v10, v14
; CHECK-NEXT:    th.vmv.v.v v11, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i64> @llvm.riscv.th.vfwcvt.x.f.v.nxv4i64.nxv4f32(
    <vscale x 4 x i64> undef,
    <vscale x 4 x float> %0,
    iXLen 0, iXLen %1)

  ret <vscale x 4 x i64> %a
}

declare <vscale x 4 x i64> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv4i64.nxv4f32(
  <vscale x 4 x i64>,
  <vscale x 4 x float>,
  <vscale x 4 x i1>,
  iXLen, iXLen);

define <vscale x 4 x i64> @intrinsic_vfwcvt_mask_x_f_v_nxv4i64_nxv4f32(<vscale x 4 x i64> %0, <vscale x 4 x float> %1, <vscale x 4 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_mask_x_f_v_nxv4i64_nxv4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m2, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v8, v12, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x i64> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv4i64.nxv4f32(
    <vscale x 4 x i64> %0,
    <vscale x 4 x float> %1,
    <vscale x 4 x i1> %2,
    iXLen 0, iXLen %3)

  ret <vscale x 4 x i64> %a
}

declare <vscale x 8 x i64> @llvm.riscv.th.vfwcvt.x.f.v.nxv8i64.nxv8f32(
  <vscale x 8 x i64>,
  <vscale x 8 x float>,
  iXLen, iXLen);

define <vscale x 8 x i64> @intrinsic_vfwcvt_x_f_v_nxv8i64_nxv8f32(<vscale x 8 x float> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_x_f_v_nxv8i64_nxv8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v16, v8
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vmv.v.v v12, v20
; CHECK-NEXT:    th.vmv.v.v v13, v21
; CHECK-NEXT:    th.vmv.v.v v14, v22
; CHECK-NEXT:    th.vmv.v.v v15, v23
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i64> @llvm.riscv.th.vfwcvt.x.f.v.nxv8i64.nxv8f32(
    <vscale x 8 x i64> undef,
    <vscale x 8 x float> %0,
    iXLen 0, iXLen %1)

  ret <vscale x 8 x i64> %a
}

declare <vscale x 8 x i64> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv8i64.nxv8f32(
  <vscale x 8 x i64>,
  <vscale x 8 x float>,
  <vscale x 8 x i1>,
  iXLen, iXLen);

define <vscale x 8 x i64> @intrinsic_vfwcvt_mask_x_f_v_nxv8i64_nxv8f32(<vscale x 8 x i64> %0, <vscale x 8 x float> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vfwcvt_mask_x_f_v_nxv8i64_nxv8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e32, m4, d1
; CHECK-NEXT:    fsrmi a0, 0
; CHECK-NEXT:    th.vfwcvt.x.f.v v8, v16, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i64> @llvm.riscv.th.vfwcvt.x.f.v.mask.nxv8i64.nxv8f32(
    <vscale x 8 x i64> %0,
    <vscale x 8 x float> %1,
    <vscale x 8 x i1> %2,
    iXLen 0, iXLen %3)

  ret <vscale x 8 x i64> %a
}

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s

declare <vscale x 8 x i1> @llvm.riscv.th.vmsif.nxv8i1(
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmsif_m_nxv8i1(<vscale x 8 x i1> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vmsif_m_nxv8i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m1, d1
; CHECK-NEXT:    th.vmsif.m v8, v0
; CHECK-NEXT:    th.vmv.v.v v0, v8
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmsif.nxv8i1(
    <vscale x 8 x i1> %0,
    iXLen %1)
  ret <vscale x 8 x i1> %a
}

declare <vscale x 8 x i1> @llvm.riscv.th.vmsif.mask.nxv8i1(
  <vscale x 8 x i1>,
  <vscale x 8 x i1>,
  <vscale x 8 x i1>,
  iXLen);

define <vscale x 8 x i1> @intrinsic_vmsif_mask_m_nxv8i1_nxv8i1(<vscale x 8 x i1> %0, <vscale x 8 x i1> %1, <vscale x 8 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmsif_mask_m_nxv8i1_nxv8i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v0
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m1, d1
; CHECK-NEXT:    th.vmsif.m v10, v8, v0.t
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x i1> @llvm.riscv.th.vmsif.mask.nxv8i1(
    <vscale x 8 x i1> %0,
    <vscale x 8 x i1> %1,
    <vscale x 8 x i1> %2,
    iXLen %3)
  ret <vscale x 8 x i1> %a
}

declare <vscale x 16 x i1> @llvm.riscv.th.vmsif.nxv16i1(
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i1> @intrinsic_vmsif_m_nxv16i1(<vscale x 16 x i1> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vmsif_m_nxv16i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m2, d1
; CHECK-NEXT:    th.vmsif.m v8, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v8
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmsif.nxv16i1(
    <vscale x 16 x i1> %0,
    iXLen %1)
  ret <vscale x 16 x i1> %a
}

declare <vscale x 16 x i1> @llvm.riscv.th.vmsif.mask.nxv16i1(
  <vscale x 16 x i1>,
  <vscale x 16 x i1>,
  <vscale x 16 x i1>,
  iXLen);

define <vscale x 16 x i1> @intrinsic_vmsif_mask_m_nxv16i1_nxv16i1(<vscale x 16 x i1> %0, <vscale x 16 x i1> %1, <vscale x 16 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmsif_mask_m_nxv16i1_nxv16i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v0
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m2, d1
; CHECK-NEXT:    th.vmsif.m v10, v8, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x i1> @llvm.riscv.th.vmsif.mask.nxv16i1(
    <vscale x 16 x i1> %0,
    <vscale x 16 x i1> %1,
    <vscale x 16 x i1> %2,
    iXLen %3)
  ret <vscale x 16 x i1> %a
}

declare <vscale x 32 x i1> @llvm.riscv.th.vmsif.nxv32i1(
  <vscale x 32 x i1>,
  iXLen);

define <vscale x 32 x i1> @intrinsic_vmsif_m_nxv32i1(<vscale x 32 x i1> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vmsif_m_nxv32i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m4, d1
; CHECK-NEXT:    th.vmsif.m v8, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v8
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x i1> @llvm.riscv.th.vmsif.nxv32i1(
    <vscale x 32 x i1> %0,
    iXLen %1)
  ret <vscale x 32 x i1> %a
}

declare <vscale x 32 x i1> @llvm.riscv.th.vmsif.mask.nxv32i1(
  <vscale x 32 x i1>,
  <vscale x 32 x i1>,
  <vscale x 32 x i1>,
  iXLen);

define <vscale x 32 x i1> @intrinsic_vmsif_mask_m_nxv32i1_nxv32i1(<vscale x 32 x i1> %0, <vscale x 32 x i1> %1, <vscale x 32 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmsif_mask_m_nxv32i1_nxv32i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v0
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m4, d1
; CHECK-NEXT:    th.vmsif.m v10, v8, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x i1> @llvm.riscv.th.vmsif.mask.nxv32i1(
    <vscale x 32 x i1> %0,
    <vscale x 32 x i1> %1,
    <vscale x 32 x i1> %2,
    iXLen %3)
  ret <vscale x 32 x i1> %a
}

declare <vscale x 64 x i1> @llvm.riscv.th.vmsif.nxv64i1(
  <vscale x 64 x i1>,
  iXLen);

define <vscale x 64 x i1> @intrinsic_vmsif_m_nxv64i1(<vscale x 64 x i1> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vmsif_m_nxv64i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m8, d1
; CHECK-NEXT:    th.vmsif.m v8, v0
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v8
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 64 x i1> @llvm.riscv.th.vmsif.nxv64i1(
    <vscale x 64 x i1> %0,
    iXLen %1)
  ret <vscale x 64 x i1> %a
}

declare <vscale x 64 x i1> @llvm.riscv.th.vmsif.mask.nxv64i1(
  <vscale x 64 x i1>,
  <vscale x 64 x i1>,
  <vscale x 64 x i1>,
  iXLen);

define <vscale x 64 x i1> @intrinsic_vmsif_mask_m_nxv64i1_nxv64i1(<vscale x 64 x i1> %0, <vscale x 64 x i1> %1, <vscale x 64 x i1> %2, iXLen %3) nounwind {
; CHECK-LABEL: intrinsic_vmsif_mask_m_nxv64i1_nxv64i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v0
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v9
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m8, d1
; CHECK-NEXT:    th.vmsif.m v10, v8, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 64 x i1> @llvm.riscv.th.vmsif.mask.nxv64i1(
    <vscale x 64 x i1> %0,
    <vscale x 64 x i1> %1,
    <vscale x 64 x i1> %2,
    iXLen %3)
  ret <vscale x 64 x i1> %a
}

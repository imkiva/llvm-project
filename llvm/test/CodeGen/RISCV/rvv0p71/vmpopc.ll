; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+xtheadvector \
; RUN:   -verify-machineinstrs | FileCheck %s

declare iXLen @llvm.riscv.th.vmpopc.iXLen.nxv8i1(
  <vscale x 8 x i1>,
  iXLen);

define iXLen @intrinsic_vmpopc_m_nxv8i1(<vscale x 8 x i1> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vmpopc_m_nxv8i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m1, d1
; CHECK-NEXT:    th.vmpopc.m a0, v0
; CHECK-NEXT:    ret
entry:
  %a = call iXLen @llvm.riscv.th.vmpopc.iXLen.nxv8i1(
    <vscale x 8 x i1> %0,
    iXLen %1)

  ret iXLen %a
}

declare iXLen @llvm.riscv.th.vmpopc.mask.iXLen.nxv8i1(
  <vscale x 8 x i1>,
  <vscale x 8 x i1>,
  iXLen);

define iXLen @intrinsic_vmpopc_mask_m_nxv8i1(<vscale x 8 x i1> %0, <vscale x 8 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmpopc_mask_m_nxv8i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v9, v0
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v8
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m1, d1
; CHECK-NEXT:    th.vmpopc.m a0, v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call iXLen @llvm.riscv.th.vmpopc.mask.iXLen.nxv8i1(
    <vscale x 8 x i1> %0,
    <vscale x 8 x i1> %1,
    iXLen %2)

  ret iXLen %a
}

declare iXLen @llvm.riscv.th.vmpopc.iXLen.nxv16i1(
  <vscale x 16 x i1>,
  iXLen);

define iXLen @intrinsic_vmpopc_m_nxv16i1(<vscale x 16 x i1> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vmpopc_m_nxv16i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m2, d1
; CHECK-NEXT:    th.vmpopc.m a0, v0
; CHECK-NEXT:    ret
entry:
  %a = call iXLen @llvm.riscv.th.vmpopc.iXLen.nxv16i1(
    <vscale x 16 x i1> %0,
    iXLen %1)

  ret iXLen %a
}

declare iXLen @llvm.riscv.th.vmpopc.mask.iXLen.nxv16i1(
  <vscale x 16 x i1>,
  <vscale x 16 x i1>,
  iXLen);

define iXLen @intrinsic_vmpopc_mask_m_nxv16i1(<vscale x 16 x i1> %0, <vscale x 16 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmpopc_mask_m_nxv16i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v9, v0
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v8
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m2, d1
; CHECK-NEXT:    th.vmpopc.m a0, v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call iXLen @llvm.riscv.th.vmpopc.mask.iXLen.nxv16i1(
    <vscale x 16 x i1> %0,
    <vscale x 16 x i1> %1,
    iXLen %2)

  ret iXLen %a
}

declare iXLen @llvm.riscv.th.vmpopc.iXLen.nxv32i1(
  <vscale x 32 x i1>,
  iXLen);

define iXLen @intrinsic_vmpopc_m_nxv32i1(<vscale x 32 x i1> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vmpopc_m_nxv32i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m4, d1
; CHECK-NEXT:    th.vmpopc.m a0, v0
; CHECK-NEXT:    ret
entry:
  %a = call iXLen @llvm.riscv.th.vmpopc.iXLen.nxv32i1(
    <vscale x 32 x i1> %0,
    iXLen %1)

  ret iXLen %a
}

declare iXLen @llvm.riscv.th.vmpopc.mask.iXLen.nxv32i1(
  <vscale x 32 x i1>,
  <vscale x 32 x i1>,
  iXLen);

define iXLen @intrinsic_vmpopc_mask_m_nxv32i1(<vscale x 32 x i1> %0, <vscale x 32 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmpopc_mask_m_nxv32i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v9, v0
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v8
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m4, d1
; CHECK-NEXT:    th.vmpopc.m a0, v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call iXLen @llvm.riscv.th.vmpopc.mask.iXLen.nxv32i1(
    <vscale x 32 x i1> %0,
    <vscale x 32 x i1> %1,
    iXLen %2)

  ret iXLen %a
}

declare iXLen @llvm.riscv.th.vmpopc.iXLen.nxv64i1(
  <vscale x 64 x i1>,
  iXLen);

define iXLen @intrinsic_vmpopc_m_nxv64i1(<vscale x 64 x i1> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_vmpopc_m_nxv64i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m8, d1
; CHECK-NEXT:    th.vmpopc.m a0, v0
; CHECK-NEXT:    ret
entry:
  %a = call iXLen @llvm.riscv.th.vmpopc.iXLen.nxv64i1(
    <vscale x 64 x i1> %0,
    iXLen %1)

  ret iXLen %a
}

declare iXLen @llvm.riscv.th.vmpopc.mask.iXLen.nxv64i1(
  <vscale x 64 x i1>,
  <vscale x 64 x i1>,
  iXLen);

define iXLen @intrinsic_vmpopc_mask_m_nxv64i1(<vscale x 64 x i1> %0, <vscale x 64 x i1> %1, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_vmpopc_mask_m_nxv64i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v9, v0
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    csrr a1, vl
; CHECK-NEXT:    csrr a2, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v0, v8
; CHECK-NEXT:    th.vsetvl zero, a1, a2
; CHECK-NEXT:    th.vsetvli zero, a0, e8, m8, d1
; CHECK-NEXT:    th.vmpopc.m a0, v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call iXLen @llvm.riscv.th.vmpopc.mask.iXLen.nxv64i1(
    <vscale x 64 x i1> %0,
    <vscale x 64 x i1> %1,
    iXLen %2)

  ret iXLen %a
}

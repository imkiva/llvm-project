; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple=riscv64 -mattr=+xtheadvector -verify-machineinstrs < %s \
; RUN:    | FileCheck %s --check-prefixes=CHECK,CHECK-LABEL,CHECK-NEXT

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg2b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg2b.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg2b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg2b.v v7, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg2bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg2bu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg2bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v7, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg2bu.v v7, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg2bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg3b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg3b.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg3b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg3b.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg3bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg3bu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg3bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg3bu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg3bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg4b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg4b.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg4b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg4b.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg4bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg4bu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg4bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg4bu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg4bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg5b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg5b.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg5b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg5b.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg5bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg5bu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg5bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg5bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg5bu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg5bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg6b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg6b.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg6b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg6b.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg6bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg6bu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg6bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg6bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg6bu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg6bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg7b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg7b.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg7b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg7b.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg7bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg7bu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg7bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg7bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg7bu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg7bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8b.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg8b_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8b_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg8b.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8b.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8b.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg8b_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8b_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg8b.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8b.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8bu.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg8bu_v_nxv1i64_nxv1i64(<vscale x 1 x i64>* %0, <vscale x 1 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8bu_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg8bu.v v9, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v10
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8bu.nxv1i64.nxv1i64(
    <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef, <vscale x 1 x i64> undef,
    <vscale x 1 x i64>* %0,
    <vscale x 1 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8bu.mask.nxv1i64.nxv1i64(
  <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>,
  <vscale x 1 x i64>*,
  <vscale x 1 x i64>,
  <vscale x 1 x i1>,
  i64);

define <vscale x 1 x i64> @intrinsic_vlxseg8bu_mask_v_nxv1i64_nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64>* %1, <vscale x 1 x i64> %2, <vscale x 1 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg8bu_mask_v_nxv1i64_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v10, v8
; CHECK-NEXT:    th.vmv.v.v v11, v8
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v8
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v8
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v8
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m1, d1
; CHECK-NEXT:    th.vlxseg8bu.v v10, (a0), v9, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v11
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } @llvm.riscv.th.vlxseg8bu.mask.nxv1i64.nxv1i64(
    <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0, <vscale x 1 x i64> %0,
    <vscale x 1 x i64>* %1,
    <vscale x 1 x i64> %2,
    <vscale x 1 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i64> } %a, 1
  ret <vscale x 1 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2b.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg2b_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2b_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg2b.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2b.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2b.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg2b_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2b_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg2b.v v6, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2b.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2bu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg2bu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2bu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg2bu.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2bu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2bu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg2bu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2bu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v6, v8
; CHECK-NEXT:    th.vmv.v.v v7, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg2bu.v v6, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg2bu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3b.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg3b_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3b_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg3b.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3b.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3b.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg3b_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3b_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg3b.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3b.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3bu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg3bu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3bu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg3bu.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3bu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3bu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg3bu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg3bu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg3bu.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg3bu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4b.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg4b_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4b_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg4b.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4b.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4b.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg4b_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4b_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg4b.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4b.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4bu.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg4bu_v_nxv2i64_nxv2i64(<vscale x 2 x i64>* %0, <vscale x 2 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4bu_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg4bu.v v10, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v12
; CHECK-NEXT:    th.vmv.v.v v9, v13
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4bu.nxv2i64.nxv2i64(
    <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef, <vscale x 2 x i64> undef,
    <vscale x 2 x i64>* %0,
    <vscale x 2 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4bu.mask.nxv2i64.nxv2i64(
  <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>,
  <vscale x 2 x i64>*,
  <vscale x 2 x i64>,
  <vscale x 2 x i1>,
  i64);

define <vscale x 2 x i64> @intrinsic_vlxseg4bu_mask_v_nxv2i64_nxv2i64(<vscale x 2 x i64> %0, <vscale x 2 x i64>* %1, <vscale x 2 x i64> %2, <vscale x 2 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg4bu_mask_v_nxv2i64_nxv2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v12, v8
; CHECK-NEXT:    th.vmv.v.v v13, v9
; CHECK-NEXT:    th.vmv.v.v v14, v8
; CHECK-NEXT:    th.vmv.v.v v15, v9
; CHECK-NEXT:    th.vmv.v.v v16, v8
; CHECK-NEXT:    th.vmv.v.v v17, v9
; CHECK-NEXT:    th.vmv.v.v v18, v8
; CHECK-NEXT:    th.vmv.v.v v19, v9
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m2, d1
; CHECK-NEXT:    th.vlxseg4bu.v v12, (a0), v10, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v14
; CHECK-NEXT:    th.vmv.v.v v9, v15
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } @llvm.riscv.th.vlxseg4bu.mask.nxv2i64.nxv2i64(
    <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0, <vscale x 2 x i64> %0,
    <vscale x 2 x i64>* %1,
    <vscale x 2 x i64> %2,
    <vscale x 2 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64>, <vscale x 2 x i64> } %a, 1
  ret <vscale x 2 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2b.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  i64);

define <vscale x 4 x i64> @intrinsic_vlxseg2b_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, <vscale x 4 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2b_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlxseg2b.v v12, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2b.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    <vscale x 4 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2b.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  <vscale x 4 x i1>,
  i64);

define <vscale x 4 x i64> @intrinsic_vlxseg2b_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i64> %2, <vscale x 4 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2b_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlxseg2b.v v4, (a0), v12, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2b.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0, <vscale x 4 x i64> %0,
    <vscale x 4 x i64>* %1,
    <vscale x 4 x i64> %2,
    <vscale x 4 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2bu.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  i64);

define <vscale x 4 x i64> @intrinsic_vlxseg2bu_v_nxv4i64_nxv4i64(<vscale x 4 x i64>* %0, <vscale x 4 x i64> %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2bu_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlxseg2bu.v v12, (a0), v8
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v8, v16
; CHECK-NEXT:    th.vmv.v.v v9, v17
; CHECK-NEXT:    th.vmv.v.v v10, v18
; CHECK-NEXT:    th.vmv.v.v v11, v19
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2bu.nxv4i64.nxv4i64(
    <vscale x 4 x i64> undef, <vscale x 4 x i64> undef,
    <vscale x 4 x i64>* %0,
    <vscale x 4 x i64> %1,
    i64 %2)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}

declare { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2bu.mask.nxv4i64.nxv4i64(
  <vscale x 4 x i64>, <vscale x 4 x i64>,
  <vscale x 4 x i64>*,
  <vscale x 4 x i64>,
  <vscale x 4 x i1>,
  i64);

define <vscale x 4 x i64> @intrinsic_vlxseg2bu_mask_v_nxv4i64_nxv4i64(<vscale x 4 x i64> %0, <vscale x 4 x i64>* %1, <vscale x 4 x i64> %2, <vscale x 4 x i1> %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_vlxseg2bu_mask_v_nxv4i64_nxv4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vmv.v.v v4, v8
; CHECK-NEXT:    th.vmv.v.v v5, v9
; CHECK-NEXT:    th.vmv.v.v v6, v10
; CHECK-NEXT:    th.vmv.v.v v7, v11
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    csrr a2, vl
; CHECK-NEXT:    csrr a3, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a2, a3
; CHECK-NEXT:    th.vsetvli zero, a1, e64, m4, d1
; CHECK-NEXT:    th.vlxseg2bu.v v4, (a0), v12, v0.t
; CHECK-NEXT:    csrr a0, vl
; CHECK-NEXT:    csrr a1, vtype
; CHECK-NEXT:    th.vsetvli zero, zero, e8, m1, d1
; CHECK-NEXT:    th.vsetvl zero, a0, a1
; CHECK-NEXT:    ret
entry:
  %a = call { <vscale x 4 x i64>, <vscale x 4 x i64> } @llvm.riscv.th.vlxseg2bu.mask.nxv4i64.nxv4i64(
    <vscale x 4 x i64> %0, <vscale x 4 x i64> %0,
    <vscale x 4 x i64>* %1,
    <vscale x 4 x i64> %2,
    <vscale x 4 x i1> %3,
    i64 %4)

  %b = extractvalue { <vscale x 4 x i64>, <vscale x 4 x i64> } %a, 1
  ret <vscale x 4 x i64> %b
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-LABEL: {{.*}}
; CHECK-NEXT: {{.*}}
